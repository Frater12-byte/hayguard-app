

// backend/server.js
const express = require('express');
const cors = require('cors');
const nodemailer = require('nodemailer');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Middleware
app.use(cors());
app.use(express.json());

// Email configuration
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  }
});

// Authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.sendStatus(401);
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Authentication Routes
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    const user = result.rows[0];
    
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    const validPassword = await bcrypt.compare(password, user.password_hash);
    if (!validPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    res.json({
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Farm Routes
app.get('/api/farms/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const result = await pool.query('SELECT * FROM farms WHERE id = $1', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Farm not found' });
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error fetching farm:', error);
    res.status(500).json({ error: 'Failed to fetch farm' });
  }
});

app.put('/api/farms/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, location, area } = req.body;
    
    const result = await pool.query(
      'UPDATE farms SET name = $1, location = $2, area = $3, updated_at = CURRENT_TIMESTAMP WHERE id = $4 RETURNING *',
      [name, location, area, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Farm not found' });
    }
    
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error updating farm:', error);
    res.status(500).json({ error: 'Failed to update farm' });
  }
});

// Sensor Routes
app.get('/api/sensors', authenticateToken, async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM sensors ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching sensors:', error);
    res.status(500).json({ error: 'Failed to fetch sensors' });
  }
});

app.post('/api/sensors', authenticateToken, async (req, res) => {
  try {
    const { name, location, sensor_id, type, bales_monitored, temperature, moisture, battery_level } = req.body;
    
    const result = await pool.query(
      'INSERT INTO sensors (user_id, sensor_id, name, location, bales_monitored, temperature, moisture, battery_level) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *',
      [req.user.userId, sensor_id, name, location, bales_monitored || 0, temperature || 0, moisture || 0, battery_level || 100]
    );
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Error creating sensor:', error);
    console.error("Sensor creation error:", error);
    res.status(500).json({ error: "Failed to create sensor", details: error.message, code: error.code });  }
});

app.get('/api/sensors/:id/data', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { start_date, end_date } = req.query;
    
    let query = 'SELECT * FROM sensor_data WHERE sensor_id = $1';
    let params = [id];
    
    if (start_date && end_date) {
      query += ' AND timestamp BETWEEN $2 AND $3';
      params.push(start_date, end_date);
    }
    
    query += ' ORDER BY timestamp DESC';
    
    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching sensor data:', error);
    res.status(500).json({ error: 'Failed to fetch sensor data' });
  }
});

// Alert Routes
app.get('/api/alerts', authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT a.*, s.name as sensor_name 
      FROM alerts a 
      JOIN sensors s ON a.sensor_id = s.id 
      ORDER BY a.created_at DESC
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching alerts:', error);
    res.status(500).json({ error: 'Failed to fetch alerts' });
  }
});

// Dashboard Routes
app.get('/api/dashboard/stats', authenticateToken, async (req, res) => {
  try {
    const sensorCount = await pool.query('SELECT COUNT(*) FROM sensors');
    const alertCount = await pool.query('SELECT COUNT(*) FROM alerts WHERE status = $1', ['active']);
    const avgTemp = await pool.query(`
      SELECT AVG(temperature) as avg_temperature 
      FROM sensor_data 
      WHERE timestamp > NOW() - INTERVAL '24 hours'
    `);
    
    const recentData = await pool.query(`
      SELECT s.name, sd.temperature, sd.moisture, sd.timestamp
      FROM sensor_data sd
      JOIN sensors s ON sd.sensor_id = s.id
      WHERE sd.timestamp > NOW() - INTERVAL '7 days'
      ORDER BY sd.timestamp DESC
    `);
    
    res.json({
      totalSensors: parseInt(sensorCount.rows[0].count),
      activeAlerts: parseInt(alertCount.rows[0].count),
      averageTemperature: parseFloat(avgTemp.rows[0].avg_temperature) || 0,
      recentData: recentData.rows
    });
  } catch (error) {
    console.error('Error fetching dashboard stats:', error);
    res.status(500).json({ error: 'Failed to fetch dashboard stats' });
  }
});

// User Management Routes
app.get('/api/users', authenticateToken, async (req, res) => {
  try {
    const result = await pool.query('SELECT id, email, name, role, created_at FROM users ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ error: 'Failed to fetch users', details: error.message, code: error.code, database_url_exists: !!process.env.DATABASE_URL });
  }
});

app.post('/api/users', authenticateToken, async (req, res) => {
  try {
    const { email, name, password, role = 'viewer' } = req.body;
    
    const existingUser = await pool.query('SELECT id FROM users WHERE email = $1', [email]);
    if (existingUser.rows.length > 0) {
      return res.status(400).json({ error: 'User already exists' });
    }
    
    const hashedPassword = await bcrypt.hash(password, 10);
    
    const result = await pool.query(
      'INSERT INTO users (email, name, password_hash, role) VALUES ($1, $2, $3, $4) RETURNING id, email, name, role, created_at',
      [email, name, hashedPassword, role]
    );
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({ error: 'Failed to create user' });
  }
});

app.delete('/api/users/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const result = await pool.query('DELETE FROM users WHERE id = $1 RETURNING id', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json({ message: 'User deleted successfully' });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ error: 'Failed to delete user' });
  }
});

// Public testing endpoints
app.get('/api/users/public', async (req, res) => {
  try {
    const result = await pool.query('SELECT id, email, name, role, created_at FROM users ORDER BY created_at DESC LIMIT 10');
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ error: 'Failed to fetch users', details: error.message, code: error.code, database_url_exists: !!process.env.DATABASE_URL });
  }
});

app.get('/api/sensors/public', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM sensors ORDER BY created_at DESC LIMIT 10');
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching sensors:', error);
    res.status(500).json({ error: 'Failed to fetch sensors' });
  }
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: "HayGuard Backend API is running",
    status: "ok"
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// Email invitation endpoint
app.post('/api/email/invite', authenticateToken, async (req, res) => {
  try {
    const { email, role } = req.body;
    res.json({ 
      success: true, 
      message: `Invitation sent to ${email} with role ${role}`,
      email: email,
      role: role 
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to send invitation' });
  }
});

// Email invitation endpoint
app.post('/api/email/invite', authenticateToken, async (req, res) => {
  try {
    const { email, role } = req.body;
    res.json({ 
      success: true, 
      message: `Invitation sent to ${email} with role ${role}`,
      email: email,
      role: role 
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to send invitation' });
  }
});


// Team members endpoints
app.get('/api/team/members', authenticateToken, async (req, res) => {
  try {
    // Create table if it doesn't exist
    await pool.query(`
      CREATE TABLE IF NOT EXISTS team_members (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) NOT NULL,
        role VARCHAR(50) NOT NULL,
        invited_by_user_id INTEGER REFERENCES users(id),
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    const result = await pool.query(
      'SELECT * FROM team_members WHERE invited_by_user_id = $1 ORDER BY created_at DESC',
      [req.user.userId]
    );
    res.json(result.rows);
  } catch (error) {
    console.error('Failed to fetch team members:', error);
    res.status(500).json({ error: 'Failed to fetch team members' });
  }
});

app.post('/api/team/members', authenticateToken, async (req, res) => {
  try {
    const { email, role } = req.body;
    const result = await pool.query(
      'INSERT INTO team_members (email, role, invited_by_user_id, status) VALUES ($1, $2, $3, $4) RETURNING *',
      [email, role, req.user.userId, 'pending']
    );
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Failed to add team member:', error);
    res.status(500).json({ error: 'Failed to add team member' });
  }
});
