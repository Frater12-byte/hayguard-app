{"ast":null,"code":"// src/services/authService.js\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3001';export const authService={// Login user\nlogin:async(email,password)=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Login failed');}const data=await response.json();// Store token in localStorage\nif(data.token){localStorage.setItem('token',data.token);}return data;}catch(error){console.error('Login error:',error);throw error;}},// Register new user\nregister:async userData=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/auth/register\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Registration failed');}return await response.json();}catch(error){console.error('Registration error:',error);throw error;}},// Logout user\nlogout:()=>{localStorage.removeItem('token');// Optional: Call backend logout endpoint\n// fetch(`${API_BASE_URL}/api/auth/logout`, { method: 'POST' });\n},// Get current token\ngetToken:()=>{return localStorage.getItem('token');},// Check if user is authenticated\nisAuthenticated:()=>{const token=localStorage.getItem('token');if(!token)return false;try{// Check if token is expired (basic JWT check)\nconst payload=JSON.parse(atob(token.split('.')[1]));const currentTime=Date.now()/1000;return payload.exp>currentTime;}catch(error){console.error('Token validation error:',error);return false;}},// Request password reset\nrequestPasswordReset:async email=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/auth/forgot-password\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Password reset request failed');}return await response.json();}catch(error){console.error('Password reset error:',error);throw error;}},// Reset password with token\nresetPassword:async(token,newPassword)=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/auth/reset-password\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({token,password:newPassword})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Password reset failed');}return await response.json();}catch(error){console.error('Password reset error:',error);throw error;}},// Refresh token\nrefreshToken:async()=>{try{const currentToken=localStorage.getItem('token');if(!currentToken){throw new Error('No token found');}const response=await fetch(\"\".concat(API_BASE_URL,\"/api/auth/refresh\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(currentToken),'Content-Type':'application/json'}});if(!response.ok){throw new Error('Token refresh failed');}const data=await response.json();if(data.token){localStorage.setItem('token',data.token);}return data;}catch(error){console.error('Token refresh error:',error);// If refresh fails, logout user\nthis.logout();throw error;}}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","authService","login","email","password","response","fetch","concat","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","token","localStorage","setItem","error","console","register","userData","logout","removeItem","getToken","getItem","isAuthenticated","payload","parse","atob","split","currentTime","Date","now","exp","requestPasswordReset","resetPassword","newPassword","refreshToken","currentToken"],"sources":["/Users/francescoterragni/Desktop/hayguard/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      \n      const data = await response.json();\n      \n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  // Register new user\n  register: async (userData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    // Optional: Call backend logout endpoint\n    // fetch(`${API_BASE_URL}/api/auth/logout`, { method: 'POST' });\n  },\n\n  // Get current token\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    \n    try {\n      // Check if token is expired (basic JWT check)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  },\n\n  // Request password reset\n  requestPasswordReset: async (email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset request failed');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n\n  // Reset password with token\n  resetPassword: async (token, newPassword) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token, password: newPassword })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset failed');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    try {\n      const currentToken = localStorage.getItem('token');\n      if (!currentToken) {\n        throw new Error('No token found');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${currentToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      \n      const data = await response.json();\n      \n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      // If refresh fails, logout user\n      this.logout();\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}