{"ast":null,"code":"// src/services/authService.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await response.json();\n\n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register new user\n  register: async userData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    // Optional: Call backend logout endpoint\n    // fetch(`${API_BASE_URL}/api/auth/logout`, { method: 'POST' });\n  },\n  // Get current token\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      // Check if token is expired (basic JWT check)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  },\n  // Request password reset\n  requestPasswordReset: async email => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset request failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n  // Reset password with token\n  resetPassword: async (token, newPassword) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token,\n          password: newPassword\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n  // Refresh token\n  refreshToken: async () => {\n    try {\n      const currentToken = localStorage.getItem('token');\n      if (!currentToken) {\n        throw new Error('No token found');\n      }\n      const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${currentToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      const data = await response.json();\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      return data;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      // If refresh fails, logout user\n      this.logout();\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","authService","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","token","localStorage","setItem","error","console","register","userData","logout","removeItem","getToken","getItem","isAuthenticated","payload","parse","atob","split","currentTime","Date","now","exp","requestPasswordReset","resetPassword","newPassword","refreshToken","currentToken"],"sources":["/Users/francescoterragni/Desktop/hayguard/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      \n      const data = await response.json();\n      \n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  // Register new user\n  register: async (userData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    // Optional: Call backend logout endpoint\n    // fetch(`${API_BASE_URL}/api/auth/logout`, { method: 'POST' });\n  },\n\n  // Get current token\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    \n    try {\n      // Check if token is expired (basic JWT check)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  },\n\n  // Request password reset\n  requestPasswordReset: async (email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset request failed');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n\n  // Reset password with token\n  resetPassword: async (token, newPassword) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token, password: newPassword })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset failed');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Password reset error:', error);\n      throw error;\n    }\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    try {\n      const currentToken = localStorage.getItem('token');\n      if (!currentToken) {\n        throw new Error('No token found');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${currentToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      \n      const data = await response.json();\n      \n      if (data.token) {\n        localStorage.setItem('token', data.token);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      // If refresh fails, logout user\n      this.logout();\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}