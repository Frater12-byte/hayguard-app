{"ast":null,"code":"var _jsxFileName = \"/Users/francescoterragni/Desktop/hayguard-broken-backup/frontend/src/contexts/SensorsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorsContext = /*#__PURE__*/createContext();\nexport const useSensors = () => {\n  _s();\n  const context = useContext(SensorsContext);\n  if (!context) {\n    throw new Error('useSensors must be used within a SensorsProvider');\n  }\n  return context;\n};\n_s(useSensors, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SensorsProvider = ({\n  children\n}) => {\n  _s2();\n  const [sensors, setSensors] = useState([]);\n  const [bales, setBales] = useState(0);\n  useEffect(() => {\n    const loadSensors = () => {\n      const savedSensors = localStorage.getItem('hayguard_sensors');\n      if (savedSensors) {\n        try {\n          const parsedSensors = JSON.parse(savedSensors);\n          setSensors(parsedSensors);\n        } catch (e) {\n          console.error('Error parsing sensors:', e);\n          initializeMockData();\n        }\n      } else {\n        initializeMockData();\n      }\n    };\n    const initializeMockData = () => {\n      const mockSensors = [{\n        id: 1,\n        name: 'Barn A - Sensor 1',\n        location: 'North Barn',\n        type: 'temperature_moisture',\n        status: 'active',\n        temperature: 24.5,\n        moisture: 12.3,\n        minTemperature: 18,\n        maxTemperature: 25,\n        minMoisture: 12,\n        maxMoisture: 16,\n        lastReading: new Date(Date.now() - 5 * 60 * 1000),\n        batteryLevel: 85,\n        temperatureData: generateMockData(30, 20, 30),\n        moistureData: generateMockData(30, 10, 20)\n      }];\n      setSensors(mockSensors);\n      setBales(1247);\n    };\n    loadSensors();\n  }, []);\n  const generateMockData = (days, min, max) => {\n    const data = [];\n    const now = new Date();\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      data.push({\n        date: date.toISOString().split('T')[0],\n        value: Math.random() * (max - min) + min\n      });\n    }\n    return data;\n  };\n  useEffect(() => {\n    try {\n      localStorage.setItem('hayguard_sensors', JSON.stringify(sensors));\n    } catch (e) {\n      console.error('Error saving sensors:', e);\n    }\n  }, [sensors]);\n  const addSensor = sensorData => {\n    const newSensor = {\n      ...sensorData,\n      id: Date.now(),\n      status: 'active',\n      batteryLevel: 100,\n      temperature: Math.random() * 10 + 20,\n      moisture: Math.random() * 10 + 10,\n      lastReading: new Date(),\n      temperatureData: generateMockData(30, sensorData.minTemperature, sensorData.maxTemperature),\n      moistureData: generateMockData(30, sensorData.minMoisture, sensorData.maxMoisture)\n    };\n    setSensors(prev => [...prev, newSensor]);\n    return newSensor;\n  };\n  const updateBales = newBaleCount => {\n    setBales(newBaleCount);\n    localStorage.setItem('hayguard_bales', JSON.stringify(newBaleCount));\n  };\n  useEffect(() => {\n    const savedBales = localStorage.getItem('hayguard_bales');\n    if (savedBales) {\n      try {\n        setBales(JSON.parse(savedBales));\n      } catch (e) {\n        console.error('Error parsing bales:', e);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SensorsContext.Provider, {\n    value: {\n      sensors,\n      bales,\n      addSensor,\n      updateBales,\n      setSensors\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(SensorsProvider, \"FPCtreWpydvfjnq1RQAbULbPxHg=\");\n_c = SensorsProvider;\nvar _c;\n$RefreshReg$(_c, \"SensorsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","SensorsContext","useSensors","_s","context","Error","SensorsProvider","children","_s2","sensors","setSensors","bales","setBales","loadSensors","savedSensors","localStorage","getItem","parsedSensors","JSON","parse","e","console","error","initializeMockData","mockSensors","id","name","location","type","status","temperature","moisture","minTemperature","maxTemperature","minMoisture","maxMoisture","lastReading","Date","now","batteryLevel","temperatureData","generateMockData","moistureData","days","min","max","data","i","date","setDate","getDate","push","toISOString","split","value","Math","random","setItem","stringify","addSensor","sensorData","newSensor","prev","updateBales","newBaleCount","savedBales","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/francescoterragni/Desktop/hayguard-broken-backup/frontend/src/contexts/SensorsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst SensorsContext = createContext();\n\nexport const useSensors = () => {\n  const context = useContext(SensorsContext);\n  if (!context) {\n    throw new Error('useSensors must be used within a SensorsProvider');\n  }\n  return context;\n};\n\nexport const SensorsProvider = ({ children }) => {\n  const [sensors, setSensors] = useState([]);\n  const [bales, setBales] = useState(0);\n\n  useEffect(() => {\n    const loadSensors = () => {\n      const savedSensors = localStorage.getItem('hayguard_sensors');\n      if (savedSensors) {\n        try {\n          const parsedSensors = JSON.parse(savedSensors);\n          setSensors(parsedSensors);\n        } catch (e) {\n          console.error('Error parsing sensors:', e);\n          initializeMockData();\n        }\n      } else {\n        initializeMockData();\n      }\n    };\n\n    const initializeMockData = () => {\n      const mockSensors = [\n        {\n          id: 1,\n          name: 'Barn A - Sensor 1',\n          location: 'North Barn',\n          type: 'temperature_moisture',\n          status: 'active',\n          temperature: 24.5,\n          moisture: 12.3,\n          minTemperature: 18,\n          maxTemperature: 25,\n          minMoisture: 12,\n          maxMoisture: 16,\n          lastReading: new Date(Date.now() - 5 * 60 * 1000),\n          batteryLevel: 85,\n          temperatureData: generateMockData(30, 20, 30),\n          moistureData: generateMockData(30, 10, 20)\n        }\n      ];\n      setSensors(mockSensors);\n      setBales(1247);\n    };\n\n    loadSensors();\n  }, []);\n\n  const generateMockData = (days, min, max) => {\n    const data = [];\n    const now = new Date();\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      data.push({\n        date: date.toISOString().split('T')[0],\n        value: Math.random() * (max - min) + min\n      });\n    }\n    return data;\n  };\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('hayguard_sensors', JSON.stringify(sensors));\n    } catch (e) {\n      console.error('Error saving sensors:', e);\n    }\n  }, [sensors]);\n\n  const addSensor = (sensorData) => {\n    const newSensor = {\n      ...sensorData,\n      id: Date.now(),\n      status: 'active',\n      batteryLevel: 100,\n      temperature: Math.random() * 10 + 20,\n      moisture: Math.random() * 10 + 10,\n      lastReading: new Date(),\n      temperatureData: generateMockData(30, sensorData.minTemperature, sensorData.maxTemperature),\n      moistureData: generateMockData(30, sensorData.minMoisture, sensorData.maxMoisture)\n    };\n    \n    setSensors(prev => [...prev, newSensor]);\n    return newSensor;\n  };\n\n  const updateBales = (newBaleCount) => {\n    setBales(newBaleCount);\n    localStorage.setItem('hayguard_bales', JSON.stringify(newBaleCount));\n  };\n\n  useEffect(() => {\n    const savedBales = localStorage.getItem('hayguard_bales');\n    if (savedBales) {\n      try {\n        setBales(JSON.parse(savedBales));\n      } catch (e) {\n        console.error('Error parsing bales:', e);\n      }\n    }\n  }, []);\n\n  return (\n    <SensorsContext.Provider value={{\n      sensors,\n      bales,\n      addSensor,\n      updateBales,\n      setSensors\n    }}>\n      {children}\n    </SensorsContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMO,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGR,UAAU,CAACK,cAAc,CAAC;EAC1C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,UAAU;AAQvB,OAAO,MAAMI,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;MAC7D,IAAIF,YAAY,EAAE;QAChB,IAAI;UACF,MAAMG,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC;UAC9CJ,UAAU,CAACO,aAAa,CAAC;QAC3B,CAAC,CAAC,OAAOG,CAAC,EAAE;UACVC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,CAAC,CAAC;UAC1CG,kBAAkB,CAAC,CAAC;QACtB;MACF,CAAC,MAAM;QACLA,kBAAkB,CAAC,CAAC;MACtB;IACF,CAAC;IAED,MAAMA,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,MAAMC,WAAW,GAAG,CAClB;QACEC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,mBAAmB;QACzBC,QAAQ,EAAE,YAAY;QACtBC,IAAI,EAAE,sBAAsB;QAC5BC,MAAM,EAAE,QAAQ;QAChBC,WAAW,EAAE,IAAI;QACjBC,QAAQ,EAAE,IAAI;QACdC,cAAc,EAAE,EAAE;QAClBC,cAAc,EAAE,EAAE;QAClBC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACjDC,YAAY,EAAE,EAAE;QAChBC,eAAe,EAAEC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAC7CC,YAAY,EAAED,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;MAC3C,CAAC,CACF;MACD/B,UAAU,CAACc,WAAW,CAAC;MACvBZ,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC;IAEDC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM4B,gBAAgB,GAAGA,CAACE,IAAI,EAAEC,GAAG,EAAEC,GAAG,KAAK;IAC3C,MAAMC,IAAI,GAAG,EAAE;IACf,MAAMR,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,KAAK,IAAIU,CAAC,GAAGJ,IAAI,GAAG,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,MAAMC,IAAI,GAAG,IAAIX,IAAI,CAACC,GAAG,CAAC;MAC1BU,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,OAAO,CAAC,CAAC,GAAGH,CAAC,CAAC;MAChCD,IAAI,CAACK,IAAI,CAAC;QACRH,IAAI,EAAEA,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtCC,KAAK,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIX,GAAG,GAAGD,GAAG,CAAC,GAAGA;MACvC,CAAC,CAAC;IACJ;IACA,OAAOE,IAAI;EACb,CAAC;EAEDhD,SAAS,CAAC,MAAM;IACd,IAAI;MACFiB,YAAY,CAAC0C,OAAO,CAAC,kBAAkB,EAAEvC,IAAI,CAACwC,SAAS,CAACjD,OAAO,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOW,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;IAC3C;EACF,CAAC,EAAE,CAACX,OAAO,CAAC,CAAC;EAEb,MAAMkD,SAAS,GAAIC,UAAU,IAAK;IAChC,MAAMC,SAAS,GAAG;MAChB,GAAGD,UAAU;MACbnC,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC;MACdT,MAAM,EAAE,QAAQ;MAChBU,YAAY,EAAE,GAAG;MACjBT,WAAW,EAAEyB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;MACpCzB,QAAQ,EAAEwB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;MACjCpB,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC;MACvBG,eAAe,EAAEC,gBAAgB,CAAC,EAAE,EAAEmB,UAAU,CAAC5B,cAAc,EAAE4B,UAAU,CAAC3B,cAAc,CAAC;MAC3FS,YAAY,EAAED,gBAAgB,CAAC,EAAE,EAAEmB,UAAU,CAAC1B,WAAW,EAAE0B,UAAU,CAACzB,WAAW;IACnF,CAAC;IAEDzB,UAAU,CAACoD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,SAAS,CAAC,CAAC;IACxC,OAAOA,SAAS;EAClB,CAAC;EAED,MAAME,WAAW,GAAIC,YAAY,IAAK;IACpCpD,QAAQ,CAACoD,YAAY,CAAC;IACtBjD,YAAY,CAAC0C,OAAO,CAAC,gBAAgB,EAAEvC,IAAI,CAACwC,SAAS,CAACM,YAAY,CAAC,CAAC;EACtE,CAAC;EAEDlE,SAAS,CAAC,MAAM;IACd,MAAMmE,UAAU,GAAGlD,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACzD,IAAIiD,UAAU,EAAE;MACd,IAAI;QACFrD,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC8C,UAAU,CAAC,CAAC;MAClC,CAAC,CAAC,OAAO7C,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,CAAC,CAAC;MAC1C;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA,CAACC,cAAc,CAACiE,QAAQ;IAACZ,KAAK,EAAE;MAC9B7C,OAAO;MACPE,KAAK;MACLgD,SAAS;MACTI,WAAW;MACXrD;IACF,CAAE;IAAAH,QAAA,EACCA;EAAQ;IAAA4D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAAC9D,GAAA,CAjHWF,eAAe;AAAAiE,EAAA,GAAfjE,eAAe;AAAA,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}