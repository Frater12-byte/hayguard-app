{"ast":null,"code":"var _jsxFileName = \"/Users/francescoterragni/Desktop/hayguard/frontend/src/components/Reports/Reports.js\",\n  _s = $RefreshSig$();\n// src/components/Reports/Reports.js\nimport React, { useState, useEffect } from 'react';\nimport { Download, FileText, Calendar, TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport dataGenService from '../../services/dataGenerationService';\nimport './Reports.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reports = () => {\n  _s();\n  const [sensors, setSensors] = useState([]);\n  const [selectedSensor, setSelectedSensor] = useState('all');\n  const [dateRange, setDateRange] = useState('7');\n  const [reportData, setReportData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadReportData();\n  }, [selectedSensor, dateRange]);\n  const loadReportData = () => {\n    setLoading(true);\n    try {\n      // Get all sensors with current data\n      const allSensors = dataGenService.getAllSensorsWithCurrentData();\n      const pairedSensors = allSensors.filter(s => s.status !== 'unpaired');\n      setSensors(pairedSensors);\n\n      // Get historical data based on filters\n      const days = parseInt(dateRange);\n      let historicalData = [];\n      let sensorsToProcess = [];\n      if (selectedSensor === 'all') {\n        sensorsToProcess = pairedSensors;\n      } else {\n        const sensor = pairedSensors.find(s => s.id === selectedSensor);\n        if (sensor) sensorsToProcess = [sensor];\n      }\n\n      // Collect historical data\n      sensorsToProcess.forEach(sensor => {\n        const sensorHistory = dataGenService.getHistoricalData(sensor.id, days);\n        historicalData = [...historicalData, ...sensorHistory];\n      });\n\n      // Process data for charts and statistics\n      const processedData = processReportData(sensorsToProcess, historicalData, days);\n      setReportData(processedData);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error loading report data:', error);\n      setLoading(false);\n    }\n  };\n  const processReportData = (sensors, historicalData, days) => {\n    // Sort data by timestamp\n    const sortedData = [...historicalData].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n\n    // Group data by day for daily aggregates\n    const dailyData = groupByDay(sortedData);\n\n    // Calculate statistics\n    const stats = calculateStatistics(sensors, sortedData);\n\n    // Prepare chart data\n    const chartData = prepareChartData(dailyData);\n\n    // Calculate trends\n    const trends = calculateTrends(sortedData);\n    return {\n      sensors,\n      historicalData: sortedData,\n      dailyData,\n      chartData,\n      stats,\n      trends,\n      dateRange: days\n    };\n  };\n  const groupByDay = data => {\n    const grouped = {};\n    data.forEach(reading => {\n      const date = new Date(reading.timestamp);\n      const dayKey = date.toISOString().split('T')[0];\n      if (!grouped[dayKey]) {\n        grouped[dayKey] = {\n          date: dayKey,\n          temperatures: [],\n          moistures: [],\n          batteries: [],\n          count: 0\n        };\n      }\n      if (reading.temperature !== null) {\n        grouped[dayKey].temperatures.push(reading.temperature);\n      }\n      if (reading.moisture !== null) {\n        grouped[dayKey].moistures.push(reading.moisture);\n      }\n      if (reading.battery !== null) {\n        grouped[dayKey].batteries.push(reading.battery);\n      }\n      grouped[dayKey].count++;\n    });\n    return grouped;\n  };\n  const prepareChartData = dailyData => {\n    return Object.values(dailyData).map(day => ({\n      date: new Date(day.date).toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric'\n      }),\n      avgTemp: day.temperatures.length > 0 ? (day.temperatures.reduce((a, b) => a + b, 0) / day.temperatures.length).toFixed(1) : null,\n      minTemp: day.temperatures.length > 0 ? Math.min(...day.temperatures).toFixed(1) : null,\n      maxTemp: day.temperatures.length > 0 ? Math.max(...day.temperatures).toFixed(1) : null,\n      avgMoisture: day.moistures.length > 0 ? (day.moistures.reduce((a, b) => a + b, 0) / day.moistures.length).toFixed(1) : null,\n      minMoisture: day.moistures.length > 0 ? Math.min(...day.moistures).toFixed(1) : null,\n      maxMoisture: day.moistures.length > 0 ? Math.max(...day.moistures).toFixed(1) : null,\n      avgBattery: day.batteries.length > 0 ? (day.batteries.reduce((a, b) => a + b, 0) / day.batteries.length).toFixed(1) : null,\n      readings: day.count\n    }));\n  };\n  const calculateStatistics = (sensors, data) => {\n    const temps = data.filter(r => r.temperature !== null).map(r => r.temperature);\n    const moistures = data.filter(r => r.moisture !== null).map(r => r.moisture);\n    const batteries = data.filter(r => r.battery !== null).map(r => r.battery);\n    return {\n      totalSensors: sensors.length,\n      totalReadings: data.length,\n      activeSensors: sensors.filter(s => s.status === 'online').length,\n      totalBalesMonitored: sensors.reduce((sum, s) => sum + (s.balesMonitored || 0), 0),\n      temperature: temps.length > 0 ? {\n        avg: (temps.reduce((a, b) => a + b, 0) / temps.length).toFixed(1),\n        min: Math.min(...temps).toFixed(1),\n        max: Math.max(...temps).toFixed(1),\n        count: temps.length\n      } : null,\n      moisture: moistures.length > 0 ? {\n        avg: (moistures.reduce((a, b) => a + b, 0) / moistures.length).toFixed(1),\n        min: Math.min(...moistures).toFixed(1),\n        max: Math.max(...moistures).toFixed(1),\n        count: moistures.length\n      } : null,\n      battery: batteries.length > 0 ? {\n        avg: (batteries.reduce((a, b) => a + b, 0) / batteries.length).toFixed(1),\n        min: Math.min(...batteries).toFixed(1),\n        max: Math.max(...batteries).toFixed(1)\n      } : null\n    };\n  };\n  const calculateTrends = data => {\n    if (data.length < 2) return null;\n    const firstHalf = data.slice(0, Math.floor(data.length / 2));\n    const secondHalf = data.slice(Math.floor(data.length / 2));\n    const calcAvg = (arr, key) => {\n      const values = arr.filter(r => r[key] !== null).map(r => r[key]);\n      return values.length > 0 ? values.reduce((a, b) => a + b, 0) / values.length : null;\n    };\n    const tempTrend = calcAvg(secondHalf, 'temperature') - calcAvg(firstHalf, 'temperature');\n    const moistureTrend = calcAvg(secondHalf, 'moisture') - calcAvg(firstHalf, 'moisture');\n    return {\n      temperature: tempTrend,\n      moisture: moistureTrend\n    };\n  };\n  const getTrendIcon = value => {\n    if (!value || Math.abs(value) < 0.5) return /*#__PURE__*/_jsxDEV(Minus, {\n      size: 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 49\n    }, this);\n    return value > 0 ? /*#__PURE__*/_jsxDEV(TrendingUp, {\n      size: 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(TrendingDown, {\n      size: 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 51\n    }, this);\n  };\n  const getTrendClass = value => {\n    if (!value || Math.abs(value) < 0.5) return 'trend-stable';\n    return value > 0 ? 'trend-up' : 'trend-down';\n  };\n  const exportToCSV = () => {\n    if (!reportData) return;\n    const {\n      historicalData,\n      stats,\n      dateRange\n    } = reportData;\n    let csv = 'HayGuard Sensor Data Export\\n';\n    csv += `Generated: ${new Date().toLocaleString()}\\n`;\n    csv += `Date Range: Last ${dateRange} days\\n`;\n    csv += `Total Readings: ${stats.totalReadings}\\n\\n`;\n\n    // Summary Statistics\n    csv += 'SUMMARY STATISTICS\\n';\n    csv += `Total Sensors,${stats.totalSensors}\\n`;\n    csv += `Active Sensors,${stats.activeSensors}\\n`;\n    csv += `Total Bales Monitored,${stats.totalBalesMonitored}\\n\\n`;\n    if (stats.temperature) {\n      csv += 'Temperature Statistics\\n';\n      csv += `Average,${stats.temperature.avg}°C\\n`;\n      csv += `Minimum,${stats.temperature.min}°C\\n`;\n      csv += `Maximum,${stats.temperature.max}°C\\n\\n`;\n    }\n    if (stats.moisture) {\n      csv += 'Moisture Statistics\\n';\n      csv += `Average,${stats.moisture.avg}%\\n`;\n      csv += `Minimum,${stats.moisture.min}%\\n`;\n      csv += `Maximum,${stats.moisture.max}%\\n\\n`;\n    }\n\n    // Detailed readings\n    csv += 'DETAILED READINGS\\n';\n    csv += 'Timestamp,Sensor ID,Temperature (°C),Moisture (%),Battery (%)\\n';\n    historicalData.forEach(reading => {\n      csv += `${reading.timestamp},`;\n      csv += `${reading.sensorId},`;\n      csv += `${reading.temperature !== null ? reading.temperature : 'N/A'},`;\n      csv += `${reading.moisture !== null ? reading.moisture : 'N/A'},`;\n      csv += `${reading.battery !== null ? reading.battery : 'N/A'}\\n`;\n    });\n\n    // Download\n    const blob = new Blob([csv], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `hayguard-report-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const exportToPDF = () => {\n    if (!reportData) return;\n    const {\n      sensors,\n      stats,\n      chartData,\n      trends,\n      dateRange\n    } = reportData;\n    let pdf = '═══════════════════════════════════════════════════════════════\\n';\n    pdf += '                    HAYGUARD SENSOR REPORT                      \\n';\n    pdf += '═══════════════════════════════════════════════════════════════\\n\\n';\n    pdf += `Report Generated: ${new Date().toLocaleString()}\\n`;\n    pdf += `Date Range: Last ${dateRange} days\\n`;\n    pdf += `Report Type: ${selectedSensor === 'all' ? 'All Sensors' : 'Single Sensor'}\\n\\n`;\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                      EXECUTIVE SUMMARY                         \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n    pdf += `Total Sensors Monitored:    ${stats.totalSensors}\\n`;\n    pdf += `Active Sensors:             ${stats.activeSensors}\\n`;\n    pdf += `Total Bales Protected:      ${stats.totalBalesMonitored}\\n`;\n    pdf += `Total Readings Collected:   ${stats.totalReadings}\\n\\n`;\n\n    // Temperature Analysis\n    if (stats.temperature) {\n      pdf += '───────────────────────────────────────────────────────────────\\n';\n      pdf += '                   TEMPERATURE ANALYSIS                        \\n';\n      pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n      pdf += `Average Temperature:        ${stats.temperature.avg}°C\\n`;\n      pdf += `Minimum Temperature:        ${stats.temperature.min}°C\\n`;\n      pdf += `Maximum Temperature:        ${stats.temperature.max}°C\\n`;\n      pdf += `Temperature Range:          ${(parseFloat(stats.temperature.max) - parseFloat(stats.temperature.min)).toFixed(1)}°C\\n`;\n      if (trends && trends.temperature !== null) {\n        const trendText = Math.abs(trends.temperature) < 0.5 ? 'Stable' : trends.temperature > 0 ? `Rising (+${trends.temperature.toFixed(1)}°C)` : `Falling (${trends.temperature.toFixed(1)}°C)`;\n        pdf += `Temperature Trend:          ${trendText}\\n`;\n      }\n      pdf += `Total Readings:             ${stats.temperature.count}\\n\\n`;\n    }\n\n    // Moisture Analysis\n    if (stats.moisture) {\n      pdf += '───────────────────────────────────────────────────────────────\\n';\n      pdf += '                    MOISTURE ANALYSIS                          \\n';\n      pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n      pdf += `Average Moisture:           ${stats.moisture.avg}%\\n`;\n      pdf += `Minimum Moisture:           ${stats.moisture.min}%\\n`;\n      pdf += `Maximum Moisture:           ${stats.moisture.max}%\\n`;\n      pdf += `Moisture Range:             ${(parseFloat(stats.moisture.max) - parseFloat(stats.moisture.min)).toFixed(1)}%\\n`;\n      if (trends && trends.moisture !== null) {\n        const trendText = Math.abs(trends.moisture) < 0.5 ? 'Stable' : trends.moisture > 0 ? `Rising (+${trends.moisture.toFixed(1)}%)` : `Falling (${trends.moisture.toFixed(1)}%)`;\n        pdf += `Moisture Trend:             ${trendText}\\n`;\n      }\n      pdf += `Total Readings:             ${stats.moisture.count}\\n\\n`;\n    }\n\n    // Battery Status\n    if (stats.battery) {\n      pdf += '───────────────────────────────────────────────────────────────\\n';\n      pdf += '                     BATTERY STATUS                            \\n';\n      pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n      pdf += `Average Battery Level:      ${stats.battery.avg}%\\n`;\n      pdf += `Minimum Battery Level:      ${stats.battery.min}%\\n`;\n      pdf += `Maximum Battery Level:      ${stats.battery.max}%\\n\\n`;\n    }\n\n    // Sensor Details\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                     SENSOR DETAILS                            \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n    sensors.forEach((sensor, index) => {\n      pdf += `${index + 1}. ${sensor.name}\\n`;\n      pdf += `   ID:                      ${sensor.id}\\n`;\n      pdf += `   Location:                ${sensor.location}\\n`;\n      pdf += `   Type:                    ${sensor.type.replace('_', ' & ')}\\n`;\n      pdf += `   Status:                  ${sensor.status.toUpperCase()}\\n`;\n      pdf += `   Bales Monitored:         ${sensor.balesMonitored}\\n`;\n      if (sensor.currentTemperature !== null) {\n        pdf += `   Current Temperature:     ${sensor.currentTemperature.toFixed(1)}°C\\n`;\n      }\n      if (sensor.currentMoisture !== null) {\n        pdf += `   Current Moisture:        ${sensor.currentMoisture.toFixed(1)}%\\n`;\n      }\n      pdf += `   Battery Level:           ${sensor.batteryLevel}%${sensor.isCharging ? ' (Charging)' : ''}\\n`;\n      pdf += `   Last Update:             ${new Date(sensor.lastUpdate).toLocaleString()}\\n\\n`;\n    });\n\n    // Daily Summary\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                      DAILY SUMMARY                            \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n    pdf += 'Date          | Avg Temp | Avg Moisture | Readings\\n';\n    pdf += '─────────────────────────────────────────────────────────────\\n';\n    chartData.forEach(day => {\n      const date = day.date.padEnd(13);\n      const temp = day.avgTemp ? `${day.avgTemp}°C`.padEnd(8) : 'N/A     ';\n      const moisture = day.avgMoisture ? `${day.avgMoisture}%`.padEnd(12) : 'N/A         ';\n      const readings = day.readings.toString();\n      pdf += `${date} | ${temp} | ${moisture} | ${readings}\\n`;\n    });\n    pdf += '\\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                    RECOMMENDATIONS                            \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n\n    // Generate recommendations based on data\n    const recommendations = [];\n    if (stats.temperature && parseFloat(stats.temperature.max) > 30) {\n      recommendations.push('⚠ High temperatures detected. Consider improving ventilation.');\n    }\n    if (stats.moisture && parseFloat(stats.moisture.avg) > 18) {\n      recommendations.push('⚠ Elevated moisture levels. Monitor for potential mold growth.');\n    }\n    if (stats.battery && parseFloat(stats.battery.avg) < 30) {\n      recommendations.push('⚠ Low average battery levels. Schedule sensor maintenance.');\n    }\n    if (stats.activeSensors < stats.totalSensors) {\n      recommendations.push('⚠ Some sensors are offline. Check connectivity and battery.');\n    }\n    if (recommendations.length === 0) {\n      recommendations.push('✓ All metrics within normal ranges. Continue monitoring.');\n    }\n    recommendations.forEach(rec => {\n      pdf += `${rec}\\n`;\n    });\n    pdf += '\\n═══════════════════════════════════════════════════════════════\\n';\n    pdf += '                      END OF REPORT                            \\n';\n    pdf += '═══════════════════════════════════════════════════════════════\\n';\n\n    // Download\n    const blob = new Blob([pdf], {\n      type: 'text/plain;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `hayguard-report-${new Date().toISOString().split('T')[0]}.txt`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reports\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reports-loading\",\n        children: \"Loading report data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this);\n  }\n  if (!reportData || reportData.sensors.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reports\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reports-empty\",\n        children: [/*#__PURE__*/_jsxDEV(FileText, {\n          size: 48\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Data Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No paired sensors found. Pair sensors to start generating reports.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this);\n  }\n  const {\n    stats,\n    chartData,\n    trends\n  } = reportData;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reports page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reports-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reports-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: exportToCSV,\n          children: [/*#__PURE__*/_jsxDEV(Download, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this), \"Export CSV\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: exportToPDF,\n          children: [/*#__PURE__*/_jsxDEV(Download, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), \"Export TXT\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reports-filters card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Calendar, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), \"Date Range\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: dateRange,\n          onChange: e => setDateRange(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"7\",\n            children: \"Last 7 Days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"14\",\n            children: \"Last 14 Days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"30\",\n            children: \"Last 30 Days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Sensor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedSensor,\n          onChange: e => setSelectedSensor(e.target.value),\n          className: \"filter-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All Sensors (Average)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: sensor.id,\n            children: sensor.name\n          }, sensor.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Total Sensors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.totalSensors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-footer\",\n          children: [stats.activeSensors, \" active\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Total Readings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.totalReadings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-footer\",\n          children: [\"Last \", dateRange, \" days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Bales Monitored\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.totalBalesMonitored\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-footer\",\n          children: \"Across all sensors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), stats.battery && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-header\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Avg Battery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: [stats.battery.avg, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-footer\",\n          children: [\"Range: \", stats.battery.min, \"% - \", stats.battery.max, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), stats.temperature && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"report-section card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Temperature Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this), trends && trends.temperature !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `trend-indicator ${getTrendClass(trends.temperature)}`,\n          children: [getTrendIcon(trends.temperature), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: Math.abs(trends.temperature) < 0.5 ? 'Stable' : trends.temperature > 0 ? `+${trends.temperature.toFixed(1)}°C` : `${trends.temperature.toFixed(1)}°C`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value-large\",\n            children: [stats.temperature.avg, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Minimum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value-large\",\n            children: [stats.temperature.min, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Maximum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value-large\",\n            children: [stats.temperature.max, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"#e5e7eb\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\",\n              stroke: \"#6b7280\",\n              style: {\n                fontSize: '12px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"#6b7280\",\n              style: {\n                fontSize: '12px'\n              },\n              label: {\n                value: '°C',\n                angle: -90,\n                position: 'insideLeft'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              contentStyle: {\n                backgroundColor: '#fff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"avgTemp\",\n              stroke: \"#f59e0b\",\n              strokeWidth: 2,\n              name: \"Average\",\n              dot: {\n                fill: '#f59e0b',\n                r: 4\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"maxTemp\",\n              stroke: \"#ef4444\",\n              strokeWidth: 1,\n              strokeDasharray: \"5 5\",\n              name: \"Maximum\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"minTemp\",\n              stroke: \"#3b82f6\",\n              strokeWidth: 1,\n              strokeDasharray: \"5 5\",\n              name: \"Minimum\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 9\n    }, this), stats.moisture && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"report-section card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Moisture Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this), trends && trends.moisture !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `trend-indicator ${getTrendClass(trends.moisture)}`,\n          children: [getTrendIcon(trends.moisture), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: Math.abs(trends.moisture) < 0.5 ? 'Stable' : trends.moisture > 0 ? `+${trends.moisture.toFixed(1)}%` : `${trends.moisture.toFixed(1)}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value-large\",\n            children: [stats.moisture.avg, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Minimum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value-large\",\n            children: [stats.moisture.min, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Maximum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value-large\",\n            children: [stats.moisture.max, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"#e5e7eb\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\",\n              stroke: \"#6b7280\",\n              style: {\n                fontSize: '12px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"#6b7280\",\n              style: {\n                fontSize: '12px'\n              },\n              label: {\n                value: '%',\n                angle: -90,\n                position: 'insideLeft'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              contentStyle: {\n                backgroundColor: '#fff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"avgMoisture\",\n              stroke: \"#10b981\",\n              strokeWidth: 2,\n              name: \"Average\",\n              dot: {\n                fill: '#10b981',\n                r: 4\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"maxMoisture\",\n              stroke: \"#ef4444\",\n              strokeWidth: 1,\n              strokeDasharray: \"5 5\",\n              name: \"Maximum\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"minMoisture\",\n              stroke: \"#3b82f6\",\n              strokeWidth: 1,\n              strokeDasharray: \"5 5\",\n              name: \"Minimum\",\n              dot: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"report-section card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Daily Reading Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 250,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"#e5e7eb\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\",\n              stroke: \"#6b7280\",\n              style: {\n                fontSize: '12px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"#6b7280\",\n              style: {\n                fontSize: '12px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              contentStyle: {\n                backgroundColor: '#fff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"readings\",\n              fill: \"#F4C430\",\n              name: \"Readings per Day\",\n              radius: [4, 4, 0, 0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this);\n};\n_s(Reports, \"FOdCq7UTPHTZ0+Yk0OpmnpSHeUQ=\");\n_c = Reports;\nexport default Reports;\nvar _c;\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"names":["React","useState","useEffect","Download","FileText","Calendar","TrendingUp","TrendingDown","Minus","LineChart","Line","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","dataGenService","jsxDEV","_jsxDEV","Reports","_s","sensors","setSensors","selectedSensor","setSelectedSensor","dateRange","setDateRange","reportData","setReportData","loading","setLoading","loadReportData","allSensors","getAllSensorsWithCurrentData","pairedSensors","filter","s","status","days","parseInt","historicalData","sensorsToProcess","sensor","find","id","forEach","sensorHistory","getHistoricalData","processedData","processReportData","error","console","sortedData","sort","a","b","Date","timestamp","dailyData","groupByDay","stats","calculateStatistics","chartData","prepareChartData","trends","calculateTrends","data","grouped","reading","date","dayKey","toISOString","split","temperatures","moistures","batteries","count","temperature","push","moisture","battery","Object","values","map","day","toLocaleDateString","month","avgTemp","length","reduce","toFixed","minTemp","Math","min","maxTemp","max","avgMoisture","minMoisture","maxMoisture","avgBattery","readings","temps","r","totalSensors","totalReadings","activeSensors","totalBalesMonitored","sum","balesMonitored","avg","firstHalf","slice","floor","secondHalf","calcAvg","arr","key","tempTrend","moistureTrend","getTrendIcon","value","abs","size","fileName","_jsxFileName","lineNumber","columnNumber","getTrendClass","exportToCSV","csv","toLocaleString","sensorId","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","exportToPDF","pdf","parseFloat","trendText","index","name","location","replace","toUpperCase","currentTemperature","currentMoisture","batteryLevel","isCharging","lastUpdate","padEnd","temp","toString","recommendations","rec","className","children","onClick","onChange","e","target","width","height","strokeDasharray","stroke","dataKey","fontSize","label","angle","position","contentStyle","backgroundColor","border","borderRadius","strokeWidth","dot","fill","radius","_c","$RefreshReg$"],"sources":["/Users/francescoterragni/Desktop/hayguard/frontend/src/components/Reports/Reports.js"],"sourcesContent":["// src/components/Reports/Reports.js\nimport React, { useState, useEffect } from 'react';\nimport { Download, FileText, Calendar, TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport dataGenService from '../../services/dataGenerationService';\nimport './Reports.css';\n\nconst Reports = () => {\n  const [sensors, setSensors] = useState([]);\n  const [selectedSensor, setSelectedSensor] = useState('all');\n  const [dateRange, setDateRange] = useState('7');\n  const [reportData, setReportData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadReportData();\n  }, [selectedSensor, dateRange]);\n\n  const loadReportData = () => {\n    setLoading(true);\n    \n    try {\n      // Get all sensors with current data\n      const allSensors = dataGenService.getAllSensorsWithCurrentData();\n      const pairedSensors = allSensors.filter(s => s.status !== 'unpaired');\n      setSensors(pairedSensors);\n\n      // Get historical data based on filters\n      const days = parseInt(dateRange);\n      let historicalData = [];\n      let sensorsToProcess = [];\n\n      if (selectedSensor === 'all') {\n        sensorsToProcess = pairedSensors;\n      } else {\n        const sensor = pairedSensors.find(s => s.id === selectedSensor);\n        if (sensor) sensorsToProcess = [sensor];\n      }\n\n      // Collect historical data\n      sensorsToProcess.forEach(sensor => {\n        const sensorHistory = dataGenService.getHistoricalData(sensor.id, days);\n        historicalData = [...historicalData, ...sensorHistory];\n      });\n\n      // Process data for charts and statistics\n      const processedData = processReportData(sensorsToProcess, historicalData, days);\n      setReportData(processedData);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error loading report data:', error);\n      setLoading(false);\n    }\n  };\n\n  const processReportData = (sensors, historicalData, days) => {\n    // Sort data by timestamp\n    const sortedData = [...historicalData].sort((a, b) => \n      new Date(a.timestamp) - new Date(b.timestamp)\n    );\n\n    // Group data by day for daily aggregates\n    const dailyData = groupByDay(sortedData);\n\n    // Calculate statistics\n    const stats = calculateStatistics(sensors, sortedData);\n\n    // Prepare chart data\n    const chartData = prepareChartData(dailyData);\n\n    // Calculate trends\n    const trends = calculateTrends(sortedData);\n\n    return {\n      sensors,\n      historicalData: sortedData,\n      dailyData,\n      chartData,\n      stats,\n      trends,\n      dateRange: days\n    };\n  };\n\n  const groupByDay = (data) => {\n    const grouped = {};\n\n    data.forEach(reading => {\n      const date = new Date(reading.timestamp);\n      const dayKey = date.toISOString().split('T')[0];\n\n      if (!grouped[dayKey]) {\n        grouped[dayKey] = {\n          date: dayKey,\n          temperatures: [],\n          moistures: [],\n          batteries: [],\n          count: 0\n        };\n      }\n\n      if (reading.temperature !== null) {\n        grouped[dayKey].temperatures.push(reading.temperature);\n      }\n      if (reading.moisture !== null) {\n        grouped[dayKey].moistures.push(reading.moisture);\n      }\n      if (reading.battery !== null) {\n        grouped[dayKey].batteries.push(reading.battery);\n      }\n      grouped[dayKey].count++;\n    });\n\n    return grouped;\n  };\n\n  const prepareChartData = (dailyData) => {\n    return Object.values(dailyData).map(day => ({\n      date: new Date(day.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n      avgTemp: day.temperatures.length > 0 \n        ? (day.temperatures.reduce((a, b) => a + b, 0) / day.temperatures.length).toFixed(1)\n        : null,\n      minTemp: day.temperatures.length > 0 \n        ? Math.min(...day.temperatures).toFixed(1)\n        : null,\n      maxTemp: day.temperatures.length > 0 \n        ? Math.max(...day.temperatures).toFixed(1)\n        : null,\n      avgMoisture: day.moistures.length > 0 \n        ? (day.moistures.reduce((a, b) => a + b, 0) / day.moistures.length).toFixed(1)\n        : null,\n      minMoisture: day.moistures.length > 0 \n        ? Math.min(...day.moistures).toFixed(1)\n        : null,\n      maxMoisture: day.moistures.length > 0 \n        ? Math.max(...day.moistures).toFixed(1)\n        : null,\n      avgBattery: day.batteries.length > 0 \n        ? (day.batteries.reduce((a, b) => a + b, 0) / day.batteries.length).toFixed(1)\n        : null,\n      readings: day.count\n    }));\n  };\n\n  const calculateStatistics = (sensors, data) => {\n    const temps = data.filter(r => r.temperature !== null).map(r => r.temperature);\n    const moistures = data.filter(r => r.moisture !== null).map(r => r.moisture);\n    const batteries = data.filter(r => r.battery !== null).map(r => r.battery);\n\n    return {\n      totalSensors: sensors.length,\n      totalReadings: data.length,\n      activeSensors: sensors.filter(s => s.status === 'online').length,\n      totalBalesMonitored: sensors.reduce((sum, s) => sum + (s.balesMonitored || 0), 0),\n      temperature: temps.length > 0 ? {\n        avg: (temps.reduce((a, b) => a + b, 0) / temps.length).toFixed(1),\n        min: Math.min(...temps).toFixed(1),\n        max: Math.max(...temps).toFixed(1),\n        count: temps.length\n      } : null,\n      moisture: moistures.length > 0 ? {\n        avg: (moistures.reduce((a, b) => a + b, 0) / moistures.length).toFixed(1),\n        min: Math.min(...moistures).toFixed(1),\n        max: Math.max(...moistures).toFixed(1),\n        count: moistures.length\n      } : null,\n      battery: batteries.length > 0 ? {\n        avg: (batteries.reduce((a, b) => a + b, 0) / batteries.length).toFixed(1),\n        min: Math.min(...batteries).toFixed(1),\n        max: Math.max(...batteries).toFixed(1)\n      } : null\n    };\n  };\n\n  const calculateTrends = (data) => {\n    if (data.length < 2) return null;\n\n    const firstHalf = data.slice(0, Math.floor(data.length / 2));\n    const secondHalf = data.slice(Math.floor(data.length / 2));\n\n    const calcAvg = (arr, key) => {\n      const values = arr.filter(r => r[key] !== null).map(r => r[key]);\n      return values.length > 0 ? values.reduce((a, b) => a + b, 0) / values.length : null;\n    };\n\n    const tempTrend = calcAvg(secondHalf, 'temperature') - calcAvg(firstHalf, 'temperature');\n    const moistureTrend = calcAvg(secondHalf, 'moisture') - calcAvg(firstHalf, 'moisture');\n\n    return {\n      temperature: tempTrend,\n      moisture: moistureTrend\n    };\n  };\n\n  const getTrendIcon = (value) => {\n    if (!value || Math.abs(value) < 0.5) return <Minus size={16} />;\n    return value > 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />;\n  };\n\n  const getTrendClass = (value) => {\n    if (!value || Math.abs(value) < 0.5) return 'trend-stable';\n    return value > 0 ? 'trend-up' : 'trend-down';\n  };\n\n  const exportToCSV = () => {\n    if (!reportData) return;\n\n    const { historicalData, stats, dateRange } = reportData;\n    \n    let csv = 'HayGuard Sensor Data Export\\n';\n    csv += `Generated: ${new Date().toLocaleString()}\\n`;\n    csv += `Date Range: Last ${dateRange} days\\n`;\n    csv += `Total Readings: ${stats.totalReadings}\\n\\n`;\n\n    // Summary Statistics\n    csv += 'SUMMARY STATISTICS\\n';\n    csv += `Total Sensors,${stats.totalSensors}\\n`;\n    csv += `Active Sensors,${stats.activeSensors}\\n`;\n    csv += `Total Bales Monitored,${stats.totalBalesMonitored}\\n\\n`;\n\n    if (stats.temperature) {\n      csv += 'Temperature Statistics\\n';\n      csv += `Average,${stats.temperature.avg}°C\\n`;\n      csv += `Minimum,${stats.temperature.min}°C\\n`;\n      csv += `Maximum,${stats.temperature.max}°C\\n\\n`;\n    }\n\n    if (stats.moisture) {\n      csv += 'Moisture Statistics\\n';\n      csv += `Average,${stats.moisture.avg}%\\n`;\n      csv += `Minimum,${stats.moisture.min}%\\n`;\n      csv += `Maximum,${stats.moisture.max}%\\n\\n`;\n    }\n\n    // Detailed readings\n    csv += 'DETAILED READINGS\\n';\n    csv += 'Timestamp,Sensor ID,Temperature (°C),Moisture (%),Battery (%)\\n';\n    \n    historicalData.forEach(reading => {\n      csv += `${reading.timestamp},`;\n      csv += `${reading.sensorId},`;\n      csv += `${reading.temperature !== null ? reading.temperature : 'N/A'},`;\n      csv += `${reading.moisture !== null ? reading.moisture : 'N/A'},`;\n      csv += `${reading.battery !== null ? reading.battery : 'N/A'}\\n`;\n    });\n\n    // Download\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `hayguard-report-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportToPDF = () => {\n    if (!reportData) return;\n\n    const { sensors, stats, chartData, trends, dateRange } = reportData;\n    \n    let pdf = '═══════════════════════════════════════════════════════════════\\n';\n    pdf += '                    HAYGUARD SENSOR REPORT                      \\n';\n    pdf += '═══════════════════════════════════════════════════════════════\\n\\n';\n    \n    pdf += `Report Generated: ${new Date().toLocaleString()}\\n`;\n    pdf += `Date Range: Last ${dateRange} days\\n`;\n    pdf += `Report Type: ${selectedSensor === 'all' ? 'All Sensors' : 'Single Sensor'}\\n\\n`;\n\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                      EXECUTIVE SUMMARY                         \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n\n    pdf += `Total Sensors Monitored:    ${stats.totalSensors}\\n`;\n    pdf += `Active Sensors:             ${stats.activeSensors}\\n`;\n    pdf += `Total Bales Protected:      ${stats.totalBalesMonitored}\\n`;\n    pdf += `Total Readings Collected:   ${stats.totalReadings}\\n\\n`;\n\n    // Temperature Analysis\n    if (stats.temperature) {\n      pdf += '───────────────────────────────────────────────────────────────\\n';\n      pdf += '                   TEMPERATURE ANALYSIS                        \\n';\n      pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n      pdf += `Average Temperature:        ${stats.temperature.avg}°C\\n`;\n      pdf += `Minimum Temperature:        ${stats.temperature.min}°C\\n`;\n      pdf += `Maximum Temperature:        ${stats.temperature.max}°C\\n`;\n      pdf += `Temperature Range:          ${(parseFloat(stats.temperature.max) - parseFloat(stats.temperature.min)).toFixed(1)}°C\\n`;\n      \n      if (trends && trends.temperature !== null) {\n        const trendText = Math.abs(trends.temperature) < 0.5 ? 'Stable' : \n                         trends.temperature > 0 ? `Rising (+${trends.temperature.toFixed(1)}°C)` : \n                         `Falling (${trends.temperature.toFixed(1)}°C)`;\n        pdf += `Temperature Trend:          ${trendText}\\n`;\n      }\n      pdf += `Total Readings:             ${stats.temperature.count}\\n\\n`;\n    }\n\n    // Moisture Analysis\n    if (stats.moisture) {\n      pdf += '───────────────────────────────────────────────────────────────\\n';\n      pdf += '                    MOISTURE ANALYSIS                          \\n';\n      pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n      pdf += `Average Moisture:           ${stats.moisture.avg}%\\n`;\n      pdf += `Minimum Moisture:           ${stats.moisture.min}%\\n`;\n      pdf += `Maximum Moisture:           ${stats.moisture.max}%\\n`;\n      pdf += `Moisture Range:             ${(parseFloat(stats.moisture.max) - parseFloat(stats.moisture.min)).toFixed(1)}%\\n`;\n      \n      if (trends && trends.moisture !== null) {\n        const trendText = Math.abs(trends.moisture) < 0.5 ? 'Stable' : \n                         trends.moisture > 0 ? `Rising (+${trends.moisture.toFixed(1)}%)` : \n                         `Falling (${trends.moisture.toFixed(1)}%)`;\n        pdf += `Moisture Trend:             ${trendText}\\n`;\n      }\n      pdf += `Total Readings:             ${stats.moisture.count}\\n\\n`;\n    }\n\n    // Battery Status\n    if (stats.battery) {\n      pdf += '───────────────────────────────────────────────────────────────\\n';\n      pdf += '                     BATTERY STATUS                            \\n';\n      pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n      pdf += `Average Battery Level:      ${stats.battery.avg}%\\n`;\n      pdf += `Minimum Battery Level:      ${stats.battery.min}%\\n`;\n      pdf += `Maximum Battery Level:      ${stats.battery.max}%\\n\\n`;\n    }\n\n    // Sensor Details\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                     SENSOR DETAILS                            \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n\n    sensors.forEach((sensor, index) => {\n      pdf += `${index + 1}. ${sensor.name}\\n`;\n      pdf += `   ID:                      ${sensor.id}\\n`;\n      pdf += `   Location:                ${sensor.location}\\n`;\n      pdf += `   Type:                    ${sensor.type.replace('_', ' & ')}\\n`;\n      pdf += `   Status:                  ${sensor.status.toUpperCase()}\\n`;\n      pdf += `   Bales Monitored:         ${sensor.balesMonitored}\\n`;\n      \n      if (sensor.currentTemperature !== null) {\n        pdf += `   Current Temperature:     ${sensor.currentTemperature.toFixed(1)}°C\\n`;\n      }\n      if (sensor.currentMoisture !== null) {\n        pdf += `   Current Moisture:        ${sensor.currentMoisture.toFixed(1)}%\\n`;\n      }\n      pdf += `   Battery Level:           ${sensor.batteryLevel}%${sensor.isCharging ? ' (Charging)' : ''}\\n`;\n      pdf += `   Last Update:             ${new Date(sensor.lastUpdate).toLocaleString()}\\n\\n`;\n    });\n\n    // Daily Summary\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                      DAILY SUMMARY                            \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n    pdf += 'Date          | Avg Temp | Avg Moisture | Readings\\n';\n    pdf += '─────────────────────────────────────────────────────────────\\n';\n\n    chartData.forEach(day => {\n      const date = day.date.padEnd(13);\n      const temp = day.avgTemp ? `${day.avgTemp}°C`.padEnd(8) : 'N/A     ';\n      const moisture = day.avgMoisture ? `${day.avgMoisture}%`.padEnd(12) : 'N/A         ';\n      const readings = day.readings.toString();\n      pdf += `${date} | ${temp} | ${moisture} | ${readings}\\n`;\n    });\n\n    pdf += '\\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n';\n    pdf += '                    RECOMMENDATIONS                            \\n';\n    pdf += '───────────────────────────────────────────────────────────────\\n\\n';\n\n    // Generate recommendations based on data\n    const recommendations = [];\n    \n    if (stats.temperature && parseFloat(stats.temperature.max) > 30) {\n      recommendations.push('⚠ High temperatures detected. Consider improving ventilation.');\n    }\n    if (stats.moisture && parseFloat(stats.moisture.avg) > 18) {\n      recommendations.push('⚠ Elevated moisture levels. Monitor for potential mold growth.');\n    }\n    if (stats.battery && parseFloat(stats.battery.avg) < 30) {\n      recommendations.push('⚠ Low average battery levels. Schedule sensor maintenance.');\n    }\n    if (stats.activeSensors < stats.totalSensors) {\n      recommendations.push('⚠ Some sensors are offline. Check connectivity and battery.');\n    }\n    if (recommendations.length === 0) {\n      recommendations.push('✓ All metrics within normal ranges. Continue monitoring.');\n    }\n\n    recommendations.forEach(rec => {\n      pdf += `${rec}\\n`;\n    });\n\n    pdf += '\\n═══════════════════════════════════════════════════════════════\\n';\n    pdf += '                      END OF REPORT                            \\n';\n    pdf += '═══════════════════════════════════════════════════════════════\\n';\n\n    // Download\n    const blob = new Blob([pdf], { type: 'text/plain;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `hayguard-report-${new Date().toISOString().split('T')[0]}.txt`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"reports\">\n        <div className=\"reports-loading\">Loading report data...</div>\n      </div>\n    );\n  }\n\n  if (!reportData || reportData.sensors.length === 0) {\n    return (\n      <div className=\"reports\">\n        <div className=\"reports-empty\">\n          <FileText size={48} />\n          <h3>No Data Available</h3>\n          <p>No paired sensors found. Pair sensors to start generating reports.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const { stats, chartData, trends } = reportData;\n\n  return (\n    <div className=\"reports page-container\">\n      {/* Header */}\n      <div className=\"reports-header\">\n        <div className=\"reports-actions\">\n          <button className=\"btn btn-secondary\" onClick={exportToCSV}>\n            <Download size={16} />\n            Export CSV\n          </button>\n          <button className=\"btn btn-primary\" onClick={exportToPDF}>\n            <Download size={16} />\n            Export TXT\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"reports-filters card\">\n        <div className=\"filter-group\">\n          <label>\n            <Calendar size={16} />\n            Date Range\n          </label>\n          <select \n            value={dateRange} \n            onChange={(e) => setDateRange(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"7\">Last 7 Days</option>\n            <option value=\"14\">Last 14 Days</option>\n            <option value=\"30\">Last 30 Days</option>\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label>Sensor</label>\n          <select \n            value={selectedSensor} \n            onChange={(e) => setSelectedSensor(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Sensors (Average)</option>\n            {sensors.map(sensor => (\n              <option key={sensor.id} value={sensor.id}>\n                {sensor.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"stats-grid\">\n        <div className=\"stat-card\">\n          <div className=\"stat-header\">\n            <span className=\"stat-label\">Total Sensors</span>\n          </div>\n          <div className=\"stat-value\">{stats.totalSensors}</div>\n          <div className=\"stat-footer\">\n            {stats.activeSensors} active\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"stat-header\">\n            <span className=\"stat-label\">Total Readings</span>\n          </div>\n          <div className=\"stat-value\">{stats.totalReadings}</div>\n          <div className=\"stat-footer\">\n            Last {dateRange} days\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"stat-header\">\n            <span className=\"stat-label\">Bales Monitored</span>\n          </div>\n          <div className=\"stat-value\">{stats.totalBalesMonitored}</div>\n          <div className=\"stat-footer\">\n            Across all sensors\n          </div>\n        </div>\n\n        {stats.battery && (\n          <div className=\"stat-card\">\n            <div className=\"stat-header\">\n              <span className=\"stat-label\">Avg Battery</span>\n            </div>\n            <div className=\"stat-value\">{stats.battery.avg}%</div>\n            <div className=\"stat-footer\">\n              Range: {stats.battery.min}% - {stats.battery.max}%\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Temperature Analysis */}\n      {stats.temperature && (\n        <div className=\"report-section card\">\n          <div className=\"section-header\">\n            <h3>Temperature Analysis</h3>\n            {trends && trends.temperature !== null && (\n              <div className={`trend-indicator ${getTrendClass(trends.temperature)}`}>\n                {getTrendIcon(trends.temperature)}\n                <span>\n                  {Math.abs(trends.temperature) < 0.5 ? 'Stable' : \n                   trends.temperature > 0 ? `+${trends.temperature.toFixed(1)}°C` : \n                   `${trends.temperature.toFixed(1)}°C`}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"stats-row\">\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Average</span>\n              <span className=\"stat-value-large\">{stats.temperature.avg}°C</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Minimum</span>\n              <span className=\"stat-value-large\">{stats.temperature.min}°C</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Maximum</span>\n              <span className=\"stat-value-large\">{stats.temperature.max}°C</span>\n            </div>\n          </div>\n\n          <div className=\"chart-container\">\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                <XAxis \n                  dataKey=\"date\" \n                  stroke=\"#6b7280\"\n                  style={{ fontSize: '12px' }}\n                />\n                <YAxis \n                  stroke=\"#6b7280\"\n                  style={{ fontSize: '12px' }}\n                  label={{ value: '°C', angle: -90, position: 'insideLeft' }}\n                />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#fff', \n                    border: '1px solid #e5e7eb',\n                    borderRadius: '6px'\n                  }}\n                />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"avgTemp\" \n                  stroke=\"#f59e0b\" \n                  strokeWidth={2}\n                  name=\"Average\"\n                  dot={{ fill: '#f59e0b', r: 4 }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"maxTemp\" \n                  stroke=\"#ef4444\" \n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  name=\"Maximum\"\n                  dot={false}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"minTemp\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  name=\"Minimum\"\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n\n      {/* Moisture Analysis */}\n      {stats.moisture && (\n        <div className=\"report-section card\">\n          <div className=\"section-header\">\n            <h3>Moisture Analysis</h3>\n            {trends && trends.moisture !== null && (\n              <div className={`trend-indicator ${getTrendClass(trends.moisture)}`}>\n                {getTrendIcon(trends.moisture)}\n                <span>\n                  {Math.abs(trends.moisture) < 0.5 ? 'Stable' : \n                   trends.moisture > 0 ? `+${trends.moisture.toFixed(1)}%` : \n                   `${trends.moisture.toFixed(1)}%`}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"stats-row\">\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Average</span>\n              <span className=\"stat-value-large\">{stats.moisture.avg}%</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Minimum</span>\n              <span className=\"stat-value-large\">{stats.moisture.min}%</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Maximum</span>\n              <span className=\"stat-value-large\">{stats.moisture.max}%</span>\n            </div>\n          </div>\n\n          <div className=\"chart-container\">\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                <XAxis \n                  dataKey=\"date\" \n                  stroke=\"#6b7280\"\n                  style={{ fontSize: '12px' }}\n                />\n                <YAxis \n                  stroke=\"#6b7280\"\n                  style={{ fontSize: '12px' }}\n                  label={{ value: '%', angle: -90, position: 'insideLeft' }}\n                />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#fff', \n                    border: '1px solid #e5e7eb',\n                    borderRadius: '6px'\n                  }}\n                />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"avgMoisture\" \n                  stroke=\"#10b981\" \n                  strokeWidth={2}\n                  name=\"Average\"\n                  dot={{ fill: '#10b981', r: 4 }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"maxMoisture\" \n                  stroke=\"#ef4444\" \n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  name=\"Maximum\"\n                  dot={false}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"minMoisture\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={1}\n                  strokeDasharray=\"5 5\"\n                  name=\"Minimum\"\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n\n      {/* Daily Readings */}\n      <div className=\"report-section card\">\n        <div className=\"section-header\">\n          <h3>Daily Reading Summary</h3>\n        </div>\n        \n        <div className=\"chart-container\">\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n              <XAxis \n                dataKey=\"date\" \n                stroke=\"#6b7280\"\n                style={{ fontSize: '12px' }}\n              />\n              <YAxis \n                stroke=\"#6b7280\"\n                style={{ fontSize: '12px' }}\n              />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#fff', \n                  border: '1px solid #e5e7eb',\n                  borderRadius: '6px'\n                }}\n              />\n              <Legend />\n              <Bar \n                dataKey=\"readings\" \n                fill=\"#F4C430\" \n                name=\"Readings per Day\"\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Reports;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}