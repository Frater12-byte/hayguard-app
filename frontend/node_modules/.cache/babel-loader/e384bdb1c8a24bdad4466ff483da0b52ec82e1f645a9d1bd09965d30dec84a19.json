{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        // If API fails, allow demo login\n        if (email === 'hello@hayguard-app.com' && password === '7JppT8xv1xGVG8fR') {\n          const demoData = {\n            token: 'demo-token-' + Date.now(),\n            user: {\n              id: 1,\n              name: 'Demo Fra',\n              email: 'hello@hayguard-app.com',\n              role: 'admin'\n            }\n          };\n          localStorage.setItem('token', demoData.token);\n          localStorage.setItem('user', JSON.stringify(demoData.user));\n          return demoData;\n        }\n        throw new Error('Invalid credentials');\n      }\n      const data = await response.json();\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        if (data.user) {\n          localStorage.setItem('user', JSON.stringify(data.user));\n        }\n      }\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  getCurrentUser: () => {\n    try {\n      const userStr = localStorage.getItem('user');\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      return null;\n    }\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","authService","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","demoData","token","Date","now","user","id","name","role","localStorage","setItem","Error","data","json","error","console","logout","removeItem","getToken","getItem","getCurrentUser","userStr","parse","isAuthenticated"],"sources":["/Users/francescoterragni/Desktop/hayguard/frontend/src/services/authService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      });\n      \n      if (!response.ok) {\n        // If API fails, allow demo login\n        if (email === 'hello@hayguard-app.com' && password === '7JppT8xv1xGVG8fR') {\n          const demoData = {\n            token: 'demo-token-' + Date.now(),\n            user: {\n              id: 1,\n              name: 'Demo Fra',\n              email: 'hello@hayguard-app.com',\n              role: 'admin'\n            }\n          };\n          \n          localStorage.setItem('token', demoData.token);\n          localStorage.setItem('user', JSON.stringify(demoData.user));\n          return demoData;\n        }\n        \n        throw new Error('Invalid credentials');\n      }\n      \n      const data = await response.json();\n      \n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        if (data.user) {\n          localStorage.setItem('user', JSON.stringify(data.user));\n        }\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n\n  getCurrentUser: () => {\n    try {\n      const userStr = localStorage.getItem('user');\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      return null;\n    }\n  },\n\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,iBAAiB,EAAE;QAC7DU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB;QACA,IAAIT,KAAK,KAAK,wBAAwB,IAAIC,QAAQ,KAAK,kBAAkB,EAAE;UACzE,MAAMS,QAAQ,GAAG;YACfC,KAAK,EAAE,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;YACjCC,IAAI,EAAE;cACJC,EAAE,EAAE,CAAC;cACLC,IAAI,EAAE,UAAU;cAChBhB,KAAK,EAAE,wBAAwB;cAC/BiB,IAAI,EAAE;YACR;UACF,CAAC;UAEDC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAET,QAAQ,CAACC,KAAK,CAAC;UAC7CO,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACC,SAAS,CAACE,QAAQ,CAACI,IAAI,CAAC,CAAC;UAC3D,OAAOJ,QAAQ;QACjB;QAEA,MAAM,IAAIU,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,IAAI,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACV,KAAK,EAAE;QACdO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEE,IAAI,CAACV,KAAK,CAAC;QACzC,IAAIU,IAAI,CAACP,IAAI,EAAE;UACbI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACC,SAAS,CAACa,IAAI,CAACP,IAAI,CAAC,CAAC;QACzD;MACF;MAEA,OAAOO,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,MAAM,EAAEA,CAAA,KAAM;IACZP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAOT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;EACtC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,IAAI;MACF,MAAMC,OAAO,GAAGZ,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;MAC5C,OAAOE,OAAO,GAAGvB,IAAI,CAACwB,KAAK,CAACD,OAAO,CAAC,GAAG,IAAI;IAC7C,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,OAAO,IAAI;IACb;EACF,CAAC;EAEDS,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMrB,KAAK,GAAGO,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACjB,KAAK;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}