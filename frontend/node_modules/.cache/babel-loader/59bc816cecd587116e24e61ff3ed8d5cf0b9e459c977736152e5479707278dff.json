{"ast":null,"code":"var _jsxFileName = \"/Users/francescoterragni/Desktop/hayguard/frontend/src/contexts/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/DataContext.js\nimport React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport apiService from '../services/apiService';\nimport dataGenService from '../services/dataGenerationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\n\n// Load farm info from localStorage\nconst loadFarmInfoFromStorage = () => {\n  try {\n    const stored = localStorage.getItem('hayguard_farm_info');\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.error('Error loading farm info:', error);\n  }\n  return {\n    id: 1,\n    name: 'Greenfield Farm',\n    location: {\n      address: '1234 Rural Route 5, Farmington, IA 52626',\n      latitude: 40.6331,\n      longitude: -91.7578\n    },\n    details: {\n      owner: 'John Smith',\n      manager: 'Sarah Johnson',\n      totalAcres: 250,\n      establishedYear: 2018,\n      farmType: 'Mixed Crop',\n      phone: '+1 (555) 123-4567',\n      email: 'contact@greenfieldfarm.com'\n    }\n  };\n};\n\n// Initial state\nconst initialState = {\n  farmInfo: loadFarmInfoFromStorage(),\n  sensors: [],\n  users: [],\n  alerts: [],\n  loading: false,\n  error: null\n};\n\n// Helper functions for localStorage alert status\nconst ALERT_STATUS_KEY = 'hayguard_alert_statuses';\nconst getAlertKey = alert => {\n  return `${alert.sensorId}-${alert.type}-${alert.severity}-${alert.threshold}`;\n};\nconst loadAlertStatuses = () => {\n  try {\n    const stored = localStorage.getItem(ALERT_STATUS_KEY);\n    return stored ? JSON.parse(stored) : {};\n  } catch (error) {\n    console.error('Error loading alert statuses:', error);\n    return {};\n  }\n};\nconst saveAlertStatuses = statuses => {\n  try {\n    const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n    const cleanedStatuses = {};\n    Object.keys(statuses).forEach(key => {\n      const status = statuses[key];\n      if (status.resolvedAt && status.resolvedAt > sevenDaysAgo) {\n        cleanedStatuses[key] = status;\n      }\n    });\n    localStorage.setItem(ALERT_STATUS_KEY, JSON.stringify(cleanedStatuses));\n  } catch (error) {\n    console.error('Error saving alert statuses:', error);\n  }\n};\n\n// Reducer function\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_SENSOR':\n      return {\n        ...state,\n        sensors: Array.isArray(state.sensors) ? [...state.sensors, action.payload] : [action.payload]\n      };\n    case 'UPDATE_SENSOR':\n      return {\n        ...state,\n        sensors: Array.isArray(state.sensors) ? state.sensors.map(sensor => sensor.id === action.payload.id ? {\n          ...sensor,\n          ...action.payload\n        } : sensor) : [action.payload]\n      };\n    case 'DELETE_SENSOR':\n      return {\n        ...state,\n        sensors: Array.isArray(state.sensors) ? state.sensors.filter(sensor => sensor.id !== action.payload) : []\n      };\n    case 'LOAD_SENSORS':\n      return {\n        ...state,\n        sensors: Array.isArray(action.payload) ? action.payload : []\n      };\n    case 'ADD_USER':\n      return {\n        ...state,\n        users: Array.isArray(state.users) ? [...state.users, action.payload] : [action.payload]\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        users: Array.isArray(state.users) ? state.users.map(user => user.id === action.payload.id ? {\n          ...user,\n          ...action.payload\n        } : user) : [action.payload]\n      };\n    case 'DELETE_USER':\n      return {\n        ...state,\n        users: Array.isArray(state.users) ? state.users.filter(user => user.id !== action.payload) : []\n      };\n    case 'UPDATE_FARM_INFO':\n      return {\n        ...state,\n        farmInfo: {\n          ...state.farmInfo,\n          ...action.payload\n        }\n      };\n    case 'ADD_ALERT':\n      return {\n        ...state,\n        alerts: Array.isArray(state.alerts) ? [...state.alerts, action.payload] : [action.payload]\n      };\n    case 'UPDATE_ALERT':\n      return {\n        ...state,\n        alerts: Array.isArray(state.alerts) ? state.alerts.map(alert => alert.id === action.payload.id ? {\n          ...alert,\n          ...action.payload\n        } : alert) : [action.payload]\n      };\n    case 'LOAD_ALERTS':\n      return {\n        ...state,\n        alerts: Array.isArray(action.payload) ? action.payload : []\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n  const generateAlerts = useCallback(sensorsData => {\n    const newAlerts = [];\n    let alertId = Date.now();\n    const alertStatuses = loadAlertStatuses();\n    sensorsData.forEach(sensor => {\n      var _sensor$optimalRanges, _sensor$optimalRanges2;\n      const now = new Date();\n      if (sensor.currentTemperature !== null && (_sensor$optimalRanges = sensor.optimalRanges) !== null && _sensor$optimalRanges !== void 0 && _sensor$optimalRanges.temperature) {\n        const {\n          min,\n          max\n        } = sensor.optimalRanges.temperature;\n        const temp = sensor.currentTemperature;\n        if (temp > max + 5) {\n          var _alertStatuses$alertK;\n          const alert = {\n            id: alertId++,\n            sensorId: sensor.id,\n            sensorName: sensor.name,\n            type: 'temperature',\n            severity: 'critical',\n            message: `Temperature critically high: ${temp}°C (optimal: ${min}-${max}°C)`,\n            timestamp: now.toISOString(),\n            value: temp,\n            threshold: max,\n            unit: '°C',\n            resolved: false\n          };\n          const alertKey = getAlertKey(alert);\n          if ((_alertStatuses$alertK = alertStatuses[alertKey]) !== null && _alertStatuses$alertK !== void 0 && _alertStatuses$alertK.resolved) {\n            alert.resolved = true;\n            alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n          }\n          newAlerts.push(alert);\n        } else if (temp > max) {\n          var _alertStatuses$alertK2;\n          const alert = {\n            id: alertId++,\n            sensorId: sensor.id,\n            sensorName: sensor.name,\n            type: 'temperature',\n            severity: 'warning',\n            message: `Temperature above optimal: ${temp}°C (optimal: ${min}-${max}°C)`,\n            timestamp: now.toISOString(),\n            value: temp,\n            threshold: max,\n            unit: '°C',\n            resolved: false\n          };\n          const alertKey = getAlertKey(alert);\n          if ((_alertStatuses$alertK2 = alertStatuses[alertKey]) !== null && _alertStatuses$alertK2 !== void 0 && _alertStatuses$alertK2.resolved) {\n            alert.resolved = true;\n            alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n          }\n          newAlerts.push(alert);\n        }\n      }\n      if (sensor.currentMoisture !== null && (_sensor$optimalRanges2 = sensor.optimalRanges) !== null && _sensor$optimalRanges2 !== void 0 && _sensor$optimalRanges2.moisture) {\n        const {\n          min,\n          max\n        } = sensor.optimalRanges.moisture;\n        const moisture = sensor.currentMoisture;\n        if (moisture > max + 10) {\n          var _alertStatuses$alertK3;\n          const alert = {\n            id: alertId++,\n            sensorId: sensor.id,\n            sensorName: sensor.name,\n            type: 'moisture',\n            severity: 'critical',\n            message: `Moisture critically high: ${moisture}% (optimal: ${min}-${max}%)`,\n            timestamp: now.toISOString(),\n            value: moisture,\n            threshold: max,\n            unit: '%',\n            resolved: false\n          };\n          const alertKey = getAlertKey(alert);\n          if ((_alertStatuses$alertK3 = alertStatuses[alertKey]) !== null && _alertStatuses$alertK3 !== void 0 && _alertStatuses$alertK3.resolved) {\n            alert.resolved = true;\n            alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n          }\n          newAlerts.push(alert);\n        }\n      }\n      if (sensor.batteryLevel < 20 && !sensor.isCharging) {\n        var _alertStatuses$alertK4;\n        const alert = {\n          id: alertId++,\n          sensorId: sensor.id,\n          sensorName: sensor.name,\n          type: 'battery',\n          severity: sensor.batteryLevel < 10 ? 'critical' : 'warning',\n          message: `Low battery: ${sensor.batteryLevel}%`,\n          timestamp: now.toISOString(),\n          value: sensor.batteryLevel,\n          threshold: 20,\n          unit: '%',\n          resolved: false\n        };\n        const alertKey = getAlertKey(alert);\n        if ((_alertStatuses$alertK4 = alertStatuses[alertKey]) !== null && _alertStatuses$alertK4 !== void 0 && _alertStatuses$alertK4.resolved) {\n          alert.resolved = true;\n          alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n        }\n        newAlerts.push(alert);\n      }\n    });\n    dispatch({\n      type: 'LOAD_ALERTS',\n      payload: newAlerts\n    });\n  }, []);\n  const refreshSensorData = useCallback(() => {\n    const sensorsData = dataGenService.getAllSensorsWithCurrentData();\n    dispatch({\n      type: 'LOAD_SENSORS',\n      payload: sensorsData\n    });\n    generateAlerts(sensorsData);\n  }, [generateAlerts]);\n  const loadData = useCallback(async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      try {\n        const sensorsData = await apiService.getSensorsData();\n        dispatch({\n          type: 'LOAD_SENSORS',\n          payload: sensorsData\n        });\n        generateAlerts(sensorsData);\n      } catch (apiError) {\n        console.log('API not available, using generated data');\n        refreshSensorData();\n      }\n    } catch (error) {\n      console.error('Error loading data:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, [refreshSensorData, generateAlerts]);\n  useEffect(() => {\n    loadData();\n    dataGenService.startAutoGeneration();\n    const refreshInterval = setInterval(() => {\n      refreshSensorData();\n    }, 30000);\n    return () => clearInterval(refreshInterval);\n  }, [loadData, refreshSensorData]);\n  const addSensor = async sensorData => {\n    try {\n      const newSensor = await apiService.createSensor(sensorData);\n      dispatch({\n        type: 'ADD_SENSOR',\n        payload: newSensor\n      });\n      return newSensor;\n    } catch (error) {\n      console.error('Error adding sensor:', error);\n      const mockSensor = {\n        ...sensorData,\n        id: `SENS-${Date.now()}`,\n        status: 'online',\n        batteryLevel: 100,\n        isCharging: false,\n        currentTemperature: null,\n        currentMoisture: null,\n        lastUpdate: new Date().toISOString()\n      };\n      dispatch({\n        type: 'ADD_SENSOR',\n        payload: mockSensor\n      });\n      return mockSensor;\n    }\n  };\n  const updateSensor = async (id, sensorData) => {\n    try {\n      const updatedSensor = await apiService.updateSensor(id, sensorData);\n      dispatch({\n        type: 'UPDATE_SENSOR',\n        payload: updatedSensor\n      });\n      dataGenService.updateSensorConfig(id, sensorData);\n      const storedSensors = JSON.parse(localStorage.getItem('hayguard_sensor_configs') || '{}');\n      storedSensors[id] = sensorData;\n      localStorage.setItem('hayguard_sensor_configs', JSON.stringify(storedSensors));\n      return updatedSensor;\n    } catch (error) {\n      console.error('Error updating sensor:', error);\n      const existingSensor = state.sensors.find(s => s.id === id);\n      const mergedSensor = {\n        ...existingSensor,\n        ...sensorData,\n        id\n      };\n      dispatch({\n        type: 'UPDATE_SENSOR',\n        payload: mergedSensor\n      });\n      dataGenService.updateSensorConfig(id, sensorData);\n      const storedSensors = JSON.parse(localStorage.getItem('hayguard_sensor_configs') || '{}');\n      storedSensors[id] = sensorData;\n      localStorage.setItem('hayguard_sensor_configs', JSON.stringify(storedSensors));\n      return mergedSensor;\n    }\n  };\n  const deleteSensor = async id => {\n    try {\n      await apiService.deleteSensor(id);\n      dispatch({\n        type: 'DELETE_SENSOR',\n        payload: id\n      });\n    } catch (error) {\n      console.error('Error deleting sensor:', error);\n      dispatch({\n        type: 'DELETE_SENSOR',\n        payload: id\n      });\n    }\n  };\n  const addUser = async userData => {\n    try {\n      const newUser = await apiService.createUser(userData);\n      dispatch({\n        type: 'ADD_USER',\n        payload: newUser\n      });\n      return newUser;\n    } catch (error) {\n      console.error('Error adding user:', error);\n      const mockUser = {\n        ...userData,\n        id: `U-${Date.now()}`\n      };\n      dispatch({\n        type: 'ADD_USER',\n        payload: mockUser\n      });\n      return mockUser;\n    }\n  };\n  const updateUser = async (id, userData) => {\n    try {\n      const updatedUser = await apiService.updateUser(id, userData);\n      dispatch({\n        type: 'UPDATE_USER',\n        payload: updatedUser\n      });\n      return updatedUser;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      const existingUser = state.users.find(u => u.id === id);\n      const mockUser = {\n        ...existingUser,\n        ...userData,\n        id\n      };\n      dispatch({\n        type: 'UPDATE_USER',\n        payload: mockUser\n      });\n      return mockUser;\n    }\n  };\n  const deleteUser = async id => {\n    try {\n      await apiService.deleteUser(id);\n      dispatch({\n        type: 'DELETE_USER',\n        payload: id\n      });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      dispatch({\n        type: 'DELETE_USER',\n        payload: id\n      });\n    }\n  };\n  const updateFarmInfo = async farmData => {\n    try {\n      const updatedFarmInfo = {\n        ...state.farmInfo,\n        ...farmData\n      };\n      localStorage.setItem('hayguard_farm_info', JSON.stringify(updatedFarmInfo));\n      dispatch({\n        type: 'UPDATE_FARM_INFO',\n        payload: updatedFarmInfo\n      });\n      window.dispatchEvent(new CustomEvent('farmInfoUpdated', {\n        detail: updatedFarmInfo\n      }));\n      return updatedFarmInfo;\n    } catch (error) {\n      console.error('Error updating farm info:', error);\n      dispatch({\n        type: 'UPDATE_FARM_INFO',\n        payload: farmData\n      });\n      return farmData;\n    }\n  };\n  const getSensorHistoricalData = (sensorId, days = 7) => {\n    return dataGenService.getHistoricalData(sensorId, days);\n  };\n  const generateNewReadings = () => {\n    dataGenService.generateAllReadings();\n    refreshSensorData();\n  };\n  const markAlertResolved = alertId => {\n    const alert = state.alerts.find(a => a.id === alertId);\n    if (alert) {\n      const updatedAlert = {\n        ...alert,\n        resolved: true,\n        resolvedAt: Date.now()\n      };\n      dispatch({\n        type: 'UPDATE_ALERT',\n        payload: updatedAlert\n      });\n      const alertStatuses = loadAlertStatuses();\n      const alertKey = getAlertKey(alert);\n      alertStatuses[alertKey] = {\n        resolved: true,\n        resolvedAt: Date.now()\n      };\n      saveAlertStatuses(alertStatuses);\n    }\n  };\n  const value = {\n    ...state,\n    addSensor,\n    updateSensor,\n    deleteSensor,\n    addUser,\n    updateUser,\n    deleteUser,\n    updateFarmInfo,\n    loadData,\n    getSensorHistoricalData,\n    generateNewReadings,\n    refreshSensorData,\n    markAlertResolved\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"17fv8eNm192HpvqUVF8oPEDOPtw=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default DataContext;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","apiService","dataGenService","jsxDEV","_jsxDEV","DataContext","loadFarmInfoFromStorage","stored","localStorage","getItem","JSON","parse","error","console","id","name","location","address","latitude","longitude","details","owner","manager","totalAcres","establishedYear","farmType","phone","email","initialState","farmInfo","sensors","users","alerts","loading","ALERT_STATUS_KEY","getAlertKey","alert","sensorId","type","severity","threshold","loadAlertStatuses","saveAlertStatuses","statuses","sevenDaysAgo","Date","now","cleanedStatuses","Object","keys","forEach","key","status","resolvedAt","setItem","stringify","dataReducer","state","action","Array","isArray","payload","map","sensor","filter","user","DataProvider","children","_s","dispatch","generateAlerts","sensorsData","newAlerts","alertId","alertStatuses","_sensor$optimalRanges","_sensor$optimalRanges2","currentTemperature","optimalRanges","temperature","min","max","temp","_alertStatuses$alertK","sensorName","message","timestamp","toISOString","value","unit","resolved","alertKey","push","_alertStatuses$alertK2","currentMoisture","moisture","_alertStatuses$alertK3","batteryLevel","isCharging","_alertStatuses$alertK4","refreshSensorData","getAllSensorsWithCurrentData","loadData","getSensorsData","apiError","log","startAutoGeneration","refreshInterval","setInterval","clearInterval","addSensor","sensorData","newSensor","createSensor","mockSensor","lastUpdate","updateSensor","updatedSensor","updateSensorConfig","storedSensors","existingSensor","find","s","mergedSensor","deleteSensor","addUser","userData","newUser","createUser","mockUser","updateUser","updatedUser","existingUser","u","deleteUser","updateFarmInfo","farmData","updatedFarmInfo","window","dispatchEvent","CustomEvent","detail","getSensorHistoricalData","days","getHistoricalData","generateNewReadings","generateAllReadings","markAlertResolved","a","updatedAlert","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["/Users/francescoterragni/Desktop/hayguard/frontend/src/contexts/DataContext.js"],"sourcesContent":["// src/contexts/DataContext.js\nimport React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport apiService from '../services/apiService';\nimport dataGenService from '../services/dataGenerationService';\n\nconst DataContext = createContext();\n\n// Load farm info from localStorage\nconst loadFarmInfoFromStorage = () => {\n  try {\n    const stored = localStorage.getItem('hayguard_farm_info');\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.error('Error loading farm info:', error);\n  }\n  \n  return {\n    id: 1,\n    name: 'Greenfield Farm',\n    location: {\n      address: '1234 Rural Route 5, Farmington, IA 52626',\n      latitude: 40.6331,\n      longitude: -91.7578\n    },\n    details: {\n      owner: 'John Smith',\n      manager: 'Sarah Johnson',\n      totalAcres: 250,\n      establishedYear: 2018,\n      farmType: 'Mixed Crop',\n      phone: '+1 (555) 123-4567',\n      email: 'contact@greenfieldfarm.com'\n    }\n  };\n};\n\n// Initial state\nconst initialState = {\n  farmInfo: loadFarmInfoFromStorage(),\n  sensors: [],\n  users: [],\n  alerts: [],\n  loading: false,\n  error: null\n};\n\n// Helper functions for localStorage alert status\nconst ALERT_STATUS_KEY = 'hayguard_alert_statuses';\n\nconst getAlertKey = (alert) => {\n  return `${alert.sensorId}-${alert.type}-${alert.severity}-${alert.threshold}`;\n};\n\nconst loadAlertStatuses = () => {\n  try {\n    const stored = localStorage.getItem(ALERT_STATUS_KEY);\n    return stored ? JSON.parse(stored) : {};\n  } catch (error) {\n    console.error('Error loading alert statuses:', error);\n    return {};\n  }\n};\n\nconst saveAlertStatuses = (statuses) => {\n  try {\n    const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);\n    const cleanedStatuses = {};\n    \n    Object.keys(statuses).forEach(key => {\n      const status = statuses[key];\n      if (status.resolvedAt && status.resolvedAt > sevenDaysAgo) {\n        cleanedStatuses[key] = status;\n      }\n    });\n    \n    localStorage.setItem(ALERT_STATUS_KEY, JSON.stringify(cleanedStatuses));\n  } catch (error) {\n    console.error('Error saving alert statuses:', error);\n  }\n};\n\n// Reducer function\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_SENSOR':\n      return {\n        ...state,\n        sensors: Array.isArray(state.sensors) ? [...state.sensors, action.payload] : [action.payload]\n      };\n    \n    case 'UPDATE_SENSOR':\n      return {\n        ...state,\n        sensors: Array.isArray(state.sensors) \n          ? state.sensors.map(sensor => \n              sensor.id === action.payload.id \n                ? { ...sensor, ...action.payload }\n                : sensor\n            )\n          : [action.payload]\n      };\n    \n    case 'DELETE_SENSOR':\n      return {\n        ...state,\n        sensors: Array.isArray(state.sensors) \n          ? state.sensors.filter(sensor => sensor.id !== action.payload)\n          : []\n      };\n    \n    case 'LOAD_SENSORS':\n      return {\n        ...state,\n        sensors: Array.isArray(action.payload) ? action.payload : []\n      };\n\n    case 'ADD_USER':\n      return {\n        ...state,\n        users: Array.isArray(state.users) ? [...state.users, action.payload] : [action.payload]\n      };\n    \n    case 'UPDATE_USER':\n      return {\n        ...state,\n        users: Array.isArray(state.users)\n          ? state.users.map(user => \n              user.id === action.payload.id ? { ...user, ...action.payload } : user\n            )\n          : [action.payload]\n      };\n    \n    case 'DELETE_USER':\n      return {\n        ...state,\n        users: Array.isArray(state.users)\n          ? state.users.filter(user => user.id !== action.payload)\n          : []\n      };\n\n    case 'UPDATE_FARM_INFO':\n      return {\n        ...state,\n        farmInfo: { ...state.farmInfo, ...action.payload }\n      };\n\n    case 'ADD_ALERT':\n      return {\n        ...state,\n        alerts: Array.isArray(state.alerts) ? [...state.alerts, action.payload] : [action.payload]\n      };\n    \n    case 'UPDATE_ALERT':\n      return {\n        ...state,\n        alerts: Array.isArray(state.alerts)\n          ? state.alerts.map(alert => \n              alert.id === action.payload.id ? { ...alert, ...action.payload } : alert\n            )\n          : [action.payload]\n      };\n\n    case 'LOAD_ALERTS':\n      return {\n        ...state,\n        alerts: Array.isArray(action.payload) ? action.payload : []\n      };\n\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const DataProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n\n  const generateAlerts = useCallback((sensorsData) => {\n    const newAlerts = [];\n    let alertId = Date.now();\n    const alertStatuses = loadAlertStatuses();\n\n    sensorsData.forEach(sensor => {\n      const now = new Date();\n\n      if (sensor.currentTemperature !== null && sensor.optimalRanges?.temperature) {\n        const { min, max } = sensor.optimalRanges.temperature;\n        const temp = sensor.currentTemperature;\n\n        if (temp > max + 5) {\n          const alert = {\n            id: alertId++,\n            sensorId: sensor.id,\n            sensorName: sensor.name,\n            type: 'temperature',\n            severity: 'critical',\n            message: `Temperature critically high: ${temp}°C (optimal: ${min}-${max}°C)`,\n            timestamp: now.toISOString(),\n            value: temp,\n            threshold: max,\n            unit: '°C',\n            resolved: false\n          };\n          const alertKey = getAlertKey(alert);\n          if (alertStatuses[alertKey]?.resolved) {\n            alert.resolved = true;\n            alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n          }\n          newAlerts.push(alert);\n        } else if (temp > max) {\n          const alert = {\n            id: alertId++,\n            sensorId: sensor.id,\n            sensorName: sensor.name,\n            type: 'temperature',\n            severity: 'warning',\n            message: `Temperature above optimal: ${temp}°C (optimal: ${min}-${max}°C)`,\n            timestamp: now.toISOString(),\n            value: temp,\n            threshold: max,\n            unit: '°C',\n            resolved: false\n          };\n          const alertKey = getAlertKey(alert);\n          if (alertStatuses[alertKey]?.resolved) {\n            alert.resolved = true;\n            alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n          }\n          newAlerts.push(alert);\n        }\n      }\n\n      if (sensor.currentMoisture !== null && sensor.optimalRanges?.moisture) {\n        const { min, max } = sensor.optimalRanges.moisture;\n        const moisture = sensor.currentMoisture;\n\n        if (moisture > max + 10) {\n          const alert = {\n            id: alertId++,\n            sensorId: sensor.id,\n            sensorName: sensor.name,\n            type: 'moisture',\n            severity: 'critical',\n            message: `Moisture critically high: ${moisture}% (optimal: ${min}-${max}%)`,\n            timestamp: now.toISOString(),\n            value: moisture,\n            threshold: max,\n            unit: '%',\n            resolved: false\n          };\n          const alertKey = getAlertKey(alert);\n          if (alertStatuses[alertKey]?.resolved) {\n            alert.resolved = true;\n            alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n          }\n          newAlerts.push(alert);\n        }\n      }\n\n      if (sensor.batteryLevel < 20 && !sensor.isCharging) {\n        const alert = {\n          id: alertId++,\n          sensorId: sensor.id,\n          sensorName: sensor.name,\n          type: 'battery',\n          severity: sensor.batteryLevel < 10 ? 'critical' : 'warning',\n          message: `Low battery: ${sensor.batteryLevel}%`,\n          timestamp: now.toISOString(),\n          value: sensor.batteryLevel,\n          threshold: 20,\n          unit: '%',\n          resolved: false\n        };\n        const alertKey = getAlertKey(alert);\n        if (alertStatuses[alertKey]?.resolved) {\n          alert.resolved = true;\n          alert.resolvedAt = alertStatuses[alertKey].resolvedAt;\n        }\n        newAlerts.push(alert);\n      }\n    });\n\n    dispatch({ type: 'LOAD_ALERTS', payload: newAlerts });\n  }, []);\n\n  const refreshSensorData = useCallback(() => {\n    const sensorsData = dataGenService.getAllSensorsWithCurrentData();\n    dispatch({ type: 'LOAD_SENSORS', payload: sensorsData });\n    generateAlerts(sensorsData);\n  }, [generateAlerts]);\n\n  const loadData = useCallback(async () => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      \n      try {\n        const sensorsData = await apiService.getSensorsData();\n        dispatch({ type: 'LOAD_SENSORS', payload: sensorsData });\n        generateAlerts(sensorsData);\n      } catch (apiError) {\n        console.log('API not available, using generated data');\n        refreshSensorData();\n      }\n    } catch (error) {\n      console.error('Error loading data:', error);\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [refreshSensorData, generateAlerts]);\n\n  useEffect(() => {\n    loadData();\n    dataGenService.startAutoGeneration();\n    \n    const refreshInterval = setInterval(() => {\n      refreshSensorData();\n    }, 30000);\n\n    return () => clearInterval(refreshInterval);\n  }, [loadData, refreshSensorData]);\n\n  const addSensor = async (sensorData) => {\n    try {\n      const newSensor = await apiService.createSensor(sensorData);\n      dispatch({ type: 'ADD_SENSOR', payload: newSensor });\n      return newSensor;\n    } catch (error) {\n      console.error('Error adding sensor:', error);\n      const mockSensor = { \n        ...sensorData, \n        id: `SENS-${Date.now()}`,\n        status: 'online',\n        batteryLevel: 100,\n        isCharging: false,\n        currentTemperature: null,\n        currentMoisture: null,\n        lastUpdate: new Date().toISOString()\n      };\n      dispatch({ type: 'ADD_SENSOR', payload: mockSensor });\n      return mockSensor;\n    }\n  };\n\n  const updateSensor = async (id, sensorData) => {\n    try {\n      const updatedSensor = await apiService.updateSensor(id, sensorData);\n      dispatch({ type: 'UPDATE_SENSOR', payload: updatedSensor });\n      dataGenService.updateSensorConfig(id, sensorData);\n      \n      const storedSensors = JSON.parse(localStorage.getItem('hayguard_sensor_configs') || '{}');\n      storedSensors[id] = sensorData;\n      localStorage.setItem('hayguard_sensor_configs', JSON.stringify(storedSensors));\n      \n      return updatedSensor;\n    } catch (error) {\n      console.error('Error updating sensor:', error);\n      const existingSensor = state.sensors.find(s => s.id === id);\n      const mergedSensor = { ...existingSensor, ...sensorData, id };\n      \n      dispatch({ type: 'UPDATE_SENSOR', payload: mergedSensor });\n      dataGenService.updateSensorConfig(id, sensorData);\n      \n      const storedSensors = JSON.parse(localStorage.getItem('hayguard_sensor_configs') || '{}');\n      storedSensors[id] = sensorData;\n      localStorage.setItem('hayguard_sensor_configs', JSON.stringify(storedSensors));\n      \n      return mergedSensor;\n    }\n  };\n\n  const deleteSensor = async (id) => {\n    try {\n      await apiService.deleteSensor(id);\n      dispatch({ type: 'DELETE_SENSOR', payload: id });\n    } catch (error) {\n      console.error('Error deleting sensor:', error);\n      dispatch({ type: 'DELETE_SENSOR', payload: id });\n    }\n  };\n\n  const addUser = async (userData) => {\n    try {\n      const newUser = await apiService.createUser(userData);\n      dispatch({ type: 'ADD_USER', payload: newUser });\n      return newUser;\n    } catch (error) {\n      console.error('Error adding user:', error);\n      const mockUser = { ...userData, id: `U-${Date.now()}` };\n      dispatch({ type: 'ADD_USER', payload: mockUser });\n      return mockUser;\n    }\n  };\n\n  const updateUser = async (id, userData) => {\n    try {\n      const updatedUser = await apiService.updateUser(id, userData);\n      dispatch({ type: 'UPDATE_USER', payload: updatedUser });\n      return updatedUser;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      const existingUser = state.users.find(u => u.id === id);\n      const mockUser = { ...existingUser, ...userData, id };\n      dispatch({ type: 'UPDATE_USER', payload: mockUser });\n      return mockUser;\n    }\n  };\n\n  const deleteUser = async (id) => {\n    try {\n      await apiService.deleteUser(id);\n      dispatch({ type: 'DELETE_USER', payload: id });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      dispatch({ type: 'DELETE_USER', payload: id });\n    }\n  };\n\n  const updateFarmInfo = async (farmData) => {\n    try {\n      const updatedFarmInfo = { ...state.farmInfo, ...farmData };\n      \n      localStorage.setItem('hayguard_farm_info', JSON.stringify(updatedFarmInfo));\n      \n      dispatch({ type: 'UPDATE_FARM_INFO', payload: updatedFarmInfo });\n      \n      window.dispatchEvent(new CustomEvent('farmInfoUpdated', { \n        detail: updatedFarmInfo \n      }));\n      \n      return updatedFarmInfo;\n    } catch (error) {\n      console.error('Error updating farm info:', error);\n      dispatch({ type: 'UPDATE_FARM_INFO', payload: farmData });\n      return farmData;\n    }\n  };\n\n  const getSensorHistoricalData = (sensorId, days = 7) => {\n    return dataGenService.getHistoricalData(sensorId, days);\n  };\n\n  const generateNewReadings = () => {\n    dataGenService.generateAllReadings();\n    refreshSensorData();\n  };\n\n  const markAlertResolved = (alertId) => {\n    const alert = state.alerts.find(a => a.id === alertId);\n    if (alert) {\n      const updatedAlert = { ...alert, resolved: true, resolvedAt: Date.now() };\n      dispatch({ type: 'UPDATE_ALERT', payload: updatedAlert });\n      \n      const alertStatuses = loadAlertStatuses();\n      const alertKey = getAlertKey(alert);\n      alertStatuses[alertKey] = {\n        resolved: true,\n        resolvedAt: Date.now()\n      };\n      saveAlertStatuses(alertStatuses);\n    }\n  };\n\n  const value = {\n    ...state,\n    addSensor,\n    updateSensor,\n    deleteSensor,\n    addUser,\n    updateUser,\n    deleteUser,\n    updateFarmInfo,\n    loadData,\n    getSensorHistoricalData,\n    generateNewReadings,\n    refreshSensorData,\n    markAlertResolved\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n\nexport default DataContext;"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC5F,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,cAAc,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMU,uBAAuB,GAAGA,CAAA,KAAM;EACpC,IAAI;IACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;IACzD,IAAIF,MAAM,EAAE;MACV,OAAOG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC;IAC3B;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;EAEA,OAAO;IACLE,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,iBAAiB;IACvBC,QAAQ,EAAE;MACRC,OAAO,EAAE,0CAA0C;MACnDC,QAAQ,EAAE,OAAO;MACjBC,SAAS,EAAE,CAAC;IACd,CAAC;IACDC,OAAO,EAAE;MACPC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE,eAAe;MACxBC,UAAU,EAAE,GAAG;MACfC,eAAe,EAAE,IAAI;MACrBC,QAAQ,EAAE,YAAY;MACtBC,KAAK,EAAE,mBAAmB;MAC1BC,KAAK,EAAE;IACT;EACF,CAAC;AACH,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAEvB,uBAAuB,CAAC,CAAC;EACnCwB,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE,KAAK;EACdrB,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMsB,gBAAgB,GAAG,yBAAyB;AAElD,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B,OAAO,GAAGA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACE,IAAI,IAAIF,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,SAAS,EAAE;AAC/E,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,IAAI;IACF,MAAMlC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACyB,gBAAgB,CAAC;IACrD,OAAO3B,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAG,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,CAAC,CAAC;EACX;AACF,CAAC;AAED,MAAM8B,iBAAiB,GAAIC,QAAQ,IAAK;EACtC,IAAI;IACF,MAAMC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK;IAC3D,MAAMC,eAAe,GAAG,CAAC,CAAC;IAE1BC,MAAM,CAACC,IAAI,CAACN,QAAQ,CAAC,CAACO,OAAO,CAACC,GAAG,IAAI;MACnC,MAAMC,MAAM,GAAGT,QAAQ,CAACQ,GAAG,CAAC;MAC5B,IAAIC,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,GAAGT,YAAY,EAAE;QACzDG,eAAe,CAACI,GAAG,CAAC,GAAGC,MAAM;MAC/B;IACF,CAAC,CAAC;IAEF5C,YAAY,CAAC8C,OAAO,CAACpB,gBAAgB,EAAExB,IAAI,CAAC6C,SAAS,CAACR,eAAe,CAAC,CAAC;EACzE,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;AACF,CAAC;;AAED;AACA,MAAM4C,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACpB,IAAI;IACjB,KAAK,YAAY;MACf,OAAO;QACL,GAAGmB,KAAK;QACR3B,OAAO,EAAE6B,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC3B,OAAO,CAAC,GAAG,CAAC,GAAG2B,KAAK,CAAC3B,OAAO,EAAE4B,MAAM,CAACG,OAAO,CAAC,GAAG,CAACH,MAAM,CAACG,OAAO;MAC9F,CAAC;IAEH,KAAK,eAAe;MAClB,OAAO;QACL,GAAGJ,KAAK;QACR3B,OAAO,EAAE6B,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC3B,OAAO,CAAC,GACjC2B,KAAK,CAAC3B,OAAO,CAACgC,GAAG,CAACC,MAAM,IACtBA,MAAM,CAACjD,EAAE,KAAK4C,MAAM,CAACG,OAAO,CAAC/C,EAAE,GAC3B;UAAE,GAAGiD,MAAM;UAAE,GAAGL,MAAM,CAACG;QAAQ,CAAC,GAChCE,MACN,CAAC,GACD,CAACL,MAAM,CAACG,OAAO;MACrB,CAAC;IAEH,KAAK,eAAe;MAClB,OAAO;QACL,GAAGJ,KAAK;QACR3B,OAAO,EAAE6B,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC3B,OAAO,CAAC,GACjC2B,KAAK,CAAC3B,OAAO,CAACkC,MAAM,CAACD,MAAM,IAAIA,MAAM,CAACjD,EAAE,KAAK4C,MAAM,CAACG,OAAO,CAAC,GAC5D;MACN,CAAC;IAEH,KAAK,cAAc;MACjB,OAAO;QACL,GAAGJ,KAAK;QACR3B,OAAO,EAAE6B,KAAK,CAACC,OAAO,CAACF,MAAM,CAACG,OAAO,CAAC,GAAGH,MAAM,CAACG,OAAO,GAAG;MAC5D,CAAC;IAEH,KAAK,UAAU;MACb,OAAO;QACL,GAAGJ,KAAK;QACR1B,KAAK,EAAE4B,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC1B,KAAK,CAAC,GAAG,CAAC,GAAG0B,KAAK,CAAC1B,KAAK,EAAE2B,MAAM,CAACG,OAAO,CAAC,GAAG,CAACH,MAAM,CAACG,OAAO;MACxF,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGJ,KAAK;QACR1B,KAAK,EAAE4B,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC1B,KAAK,CAAC,GAC7B0B,KAAK,CAAC1B,KAAK,CAAC+B,GAAG,CAACG,IAAI,IAClBA,IAAI,CAACnD,EAAE,KAAK4C,MAAM,CAACG,OAAO,CAAC/C,EAAE,GAAG;UAAE,GAAGmD,IAAI;UAAE,GAAGP,MAAM,CAACG;QAAQ,CAAC,GAAGI,IACnE,CAAC,GACD,CAACP,MAAM,CAACG,OAAO;MACrB,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGJ,KAAK;QACR1B,KAAK,EAAE4B,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC1B,KAAK,CAAC,GAC7B0B,KAAK,CAAC1B,KAAK,CAACiC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACnD,EAAE,KAAK4C,MAAM,CAACG,OAAO,CAAC,GACtD;MACN,CAAC;IAEH,KAAK,kBAAkB;MACrB,OAAO;QACL,GAAGJ,KAAK;QACR5B,QAAQ,EAAE;UAAE,GAAG4B,KAAK,CAAC5B,QAAQ;UAAE,GAAG6B,MAAM,CAACG;QAAQ;MACnD,CAAC;IAEH,KAAK,WAAW;MACd,OAAO;QACL,GAAGJ,KAAK;QACRzB,MAAM,EAAE2B,KAAK,CAACC,OAAO,CAACH,KAAK,CAACzB,MAAM,CAAC,GAAG,CAAC,GAAGyB,KAAK,CAACzB,MAAM,EAAE0B,MAAM,CAACG,OAAO,CAAC,GAAG,CAACH,MAAM,CAACG,OAAO;MAC3F,CAAC;IAEH,KAAK,cAAc;MACjB,OAAO;QACL,GAAGJ,KAAK;QACRzB,MAAM,EAAE2B,KAAK,CAACC,OAAO,CAACH,KAAK,CAACzB,MAAM,CAAC,GAC/ByB,KAAK,CAACzB,MAAM,CAAC8B,GAAG,CAAC1B,KAAK,IACpBA,KAAK,CAACtB,EAAE,KAAK4C,MAAM,CAACG,OAAO,CAAC/C,EAAE,GAAG;UAAE,GAAGsB,KAAK;UAAE,GAAGsB,MAAM,CAACG;QAAQ,CAAC,GAAGzB,KACrE,CAAC,GACD,CAACsB,MAAM,CAACG,OAAO;MACrB,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGJ,KAAK;QACRzB,MAAM,EAAE2B,KAAK,CAACC,OAAO,CAACF,MAAM,CAACG,OAAO,CAAC,GAAGH,MAAM,CAACG,OAAO,GAAG;MAC3D,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGJ,KAAK;QACRxB,OAAO,EAAEyB,MAAM,CAACG;MAClB,CAAC;IAEH,KAAK,WAAW;MACd,OAAO;QACL,GAAGJ,KAAK;QACR7C,KAAK,EAAE8C,MAAM,CAACG;MAChB,CAAC;IAEH;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACX,KAAK,EAAEY,QAAQ,CAAC,GAAGvE,UAAU,CAAC0D,WAAW,EAAE5B,YAAY,CAAC;EAE/D,MAAM0C,cAAc,GAAGtE,WAAW,CAAEuE,WAAW,IAAK;IAClD,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAIC,OAAO,GAAG5B,IAAI,CAACC,GAAG,CAAC,CAAC;IACxB,MAAM4B,aAAa,GAAGjC,iBAAiB,CAAC,CAAC;IAEzC8B,WAAW,CAACrB,OAAO,CAACa,MAAM,IAAI;MAAA,IAAAY,qBAAA,EAAAC,sBAAA;MAC5B,MAAM9B,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;MAEtB,IAAIkB,MAAM,CAACc,kBAAkB,KAAK,IAAI,KAAAF,qBAAA,GAAIZ,MAAM,CAACe,aAAa,cAAAH,qBAAA,eAApBA,qBAAA,CAAsBI,WAAW,EAAE;QAC3E,MAAM;UAAEC,GAAG;UAAEC;QAAI,CAAC,GAAGlB,MAAM,CAACe,aAAa,CAACC,WAAW;QACrD,MAAMG,IAAI,GAAGnB,MAAM,CAACc,kBAAkB;QAEtC,IAAIK,IAAI,GAAGD,GAAG,GAAG,CAAC,EAAE;UAAA,IAAAE,qBAAA;UAClB,MAAM/C,KAAK,GAAG;YACZtB,EAAE,EAAE2D,OAAO,EAAE;YACbpC,QAAQ,EAAE0B,MAAM,CAACjD,EAAE;YACnBsE,UAAU,EAAErB,MAAM,CAAChD,IAAI;YACvBuB,IAAI,EAAE,aAAa;YACnBC,QAAQ,EAAE,UAAU;YACpB8C,OAAO,EAAE,gCAAgCH,IAAI,gBAAgBF,GAAG,IAAIC,GAAG,KAAK;YAC5EK,SAAS,EAAExC,GAAG,CAACyC,WAAW,CAAC,CAAC;YAC5BC,KAAK,EAAEN,IAAI;YACX1C,SAAS,EAAEyC,GAAG;YACdQ,IAAI,EAAE,IAAI;YACVC,QAAQ,EAAE;UACZ,CAAC;UACD,MAAMC,QAAQ,GAAGxD,WAAW,CAACC,KAAK,CAAC;UACnC,KAAA+C,qBAAA,GAAIT,aAAa,CAACiB,QAAQ,CAAC,cAAAR,qBAAA,eAAvBA,qBAAA,CAAyBO,QAAQ,EAAE;YACrCtD,KAAK,CAACsD,QAAQ,GAAG,IAAI;YACrBtD,KAAK,CAACiB,UAAU,GAAGqB,aAAa,CAACiB,QAAQ,CAAC,CAACtC,UAAU;UACvD;UACAmB,SAAS,CAACoB,IAAI,CAACxD,KAAK,CAAC;QACvB,CAAC,MAAM,IAAI8C,IAAI,GAAGD,GAAG,EAAE;UAAA,IAAAY,sBAAA;UACrB,MAAMzD,KAAK,GAAG;YACZtB,EAAE,EAAE2D,OAAO,EAAE;YACbpC,QAAQ,EAAE0B,MAAM,CAACjD,EAAE;YACnBsE,UAAU,EAAErB,MAAM,CAAChD,IAAI;YACvBuB,IAAI,EAAE,aAAa;YACnBC,QAAQ,EAAE,SAAS;YACnB8C,OAAO,EAAE,8BAA8BH,IAAI,gBAAgBF,GAAG,IAAIC,GAAG,KAAK;YAC1EK,SAAS,EAAExC,GAAG,CAACyC,WAAW,CAAC,CAAC;YAC5BC,KAAK,EAAEN,IAAI;YACX1C,SAAS,EAAEyC,GAAG;YACdQ,IAAI,EAAE,IAAI;YACVC,QAAQ,EAAE;UACZ,CAAC;UACD,MAAMC,QAAQ,GAAGxD,WAAW,CAACC,KAAK,CAAC;UACnC,KAAAyD,sBAAA,GAAInB,aAAa,CAACiB,QAAQ,CAAC,cAAAE,sBAAA,eAAvBA,sBAAA,CAAyBH,QAAQ,EAAE;YACrCtD,KAAK,CAACsD,QAAQ,GAAG,IAAI;YACrBtD,KAAK,CAACiB,UAAU,GAAGqB,aAAa,CAACiB,QAAQ,CAAC,CAACtC,UAAU;UACvD;UACAmB,SAAS,CAACoB,IAAI,CAACxD,KAAK,CAAC;QACvB;MACF;MAEA,IAAI2B,MAAM,CAAC+B,eAAe,KAAK,IAAI,KAAAlB,sBAAA,GAAIb,MAAM,CAACe,aAAa,cAAAF,sBAAA,eAApBA,sBAAA,CAAsBmB,QAAQ,EAAE;QACrE,MAAM;UAAEf,GAAG;UAAEC;QAAI,CAAC,GAAGlB,MAAM,CAACe,aAAa,CAACiB,QAAQ;QAClD,MAAMA,QAAQ,GAAGhC,MAAM,CAAC+B,eAAe;QAEvC,IAAIC,QAAQ,GAAGd,GAAG,GAAG,EAAE,EAAE;UAAA,IAAAe,sBAAA;UACvB,MAAM5D,KAAK,GAAG;YACZtB,EAAE,EAAE2D,OAAO,EAAE;YACbpC,QAAQ,EAAE0B,MAAM,CAACjD,EAAE;YACnBsE,UAAU,EAAErB,MAAM,CAAChD,IAAI;YACvBuB,IAAI,EAAE,UAAU;YAChBC,QAAQ,EAAE,UAAU;YACpB8C,OAAO,EAAE,6BAA6BU,QAAQ,eAAef,GAAG,IAAIC,GAAG,IAAI;YAC3EK,SAAS,EAAExC,GAAG,CAACyC,WAAW,CAAC,CAAC;YAC5BC,KAAK,EAAEO,QAAQ;YACfvD,SAAS,EAAEyC,GAAG;YACdQ,IAAI,EAAE,GAAG;YACTC,QAAQ,EAAE;UACZ,CAAC;UACD,MAAMC,QAAQ,GAAGxD,WAAW,CAACC,KAAK,CAAC;UACnC,KAAA4D,sBAAA,GAAItB,aAAa,CAACiB,QAAQ,CAAC,cAAAK,sBAAA,eAAvBA,sBAAA,CAAyBN,QAAQ,EAAE;YACrCtD,KAAK,CAACsD,QAAQ,GAAG,IAAI;YACrBtD,KAAK,CAACiB,UAAU,GAAGqB,aAAa,CAACiB,QAAQ,CAAC,CAACtC,UAAU;UACvD;UACAmB,SAAS,CAACoB,IAAI,CAACxD,KAAK,CAAC;QACvB;MACF;MAEA,IAAI2B,MAAM,CAACkC,YAAY,GAAG,EAAE,IAAI,CAAClC,MAAM,CAACmC,UAAU,EAAE;QAAA,IAAAC,sBAAA;QAClD,MAAM/D,KAAK,GAAG;UACZtB,EAAE,EAAE2D,OAAO,EAAE;UACbpC,QAAQ,EAAE0B,MAAM,CAACjD,EAAE;UACnBsE,UAAU,EAAErB,MAAM,CAAChD,IAAI;UACvBuB,IAAI,EAAE,SAAS;UACfC,QAAQ,EAAEwB,MAAM,CAACkC,YAAY,GAAG,EAAE,GAAG,UAAU,GAAG,SAAS;UAC3DZ,OAAO,EAAE,gBAAgBtB,MAAM,CAACkC,YAAY,GAAG;UAC/CX,SAAS,EAAExC,GAAG,CAACyC,WAAW,CAAC,CAAC;UAC5BC,KAAK,EAAEzB,MAAM,CAACkC,YAAY;UAC1BzD,SAAS,EAAE,EAAE;UACbiD,IAAI,EAAE,GAAG;UACTC,QAAQ,EAAE;QACZ,CAAC;QACD,MAAMC,QAAQ,GAAGxD,WAAW,CAACC,KAAK,CAAC;QACnC,KAAA+D,sBAAA,GAAIzB,aAAa,CAACiB,QAAQ,CAAC,cAAAQ,sBAAA,eAAvBA,sBAAA,CAAyBT,QAAQ,EAAE;UACrCtD,KAAK,CAACsD,QAAQ,GAAG,IAAI;UACrBtD,KAAK,CAACiB,UAAU,GAAGqB,aAAa,CAACiB,QAAQ,CAAC,CAACtC,UAAU;QACvD;QACAmB,SAAS,CAACoB,IAAI,CAACxD,KAAK,CAAC;MACvB;IACF,CAAC,CAAC;IAEFiC,QAAQ,CAAC;MAAE/B,IAAI,EAAE,aAAa;MAAEuB,OAAO,EAAEW;IAAU,CAAC,CAAC;EACvD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM4B,iBAAiB,GAAGpG,WAAW,CAAC,MAAM;IAC1C,MAAMuE,WAAW,GAAGrE,cAAc,CAACmG,4BAA4B,CAAC,CAAC;IACjEhC,QAAQ,CAAC;MAAE/B,IAAI,EAAE,cAAc;MAAEuB,OAAO,EAAEU;IAAY,CAAC,CAAC;IACxDD,cAAc,CAACC,WAAW,CAAC;EAC7B,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;EAEpB,MAAMgC,QAAQ,GAAGtG,WAAW,CAAC,YAAY;IACvC,IAAI;MACFqE,QAAQ,CAAC;QAAE/B,IAAI,EAAE,aAAa;QAAEuB,OAAO,EAAE;MAAK,CAAC,CAAC;MAEhD,IAAI;QACF,MAAMU,WAAW,GAAG,MAAMtE,UAAU,CAACsG,cAAc,CAAC,CAAC;QACrDlC,QAAQ,CAAC;UAAE/B,IAAI,EAAE,cAAc;UAAEuB,OAAO,EAAEU;QAAY,CAAC,CAAC;QACxDD,cAAc,CAACC,WAAW,CAAC;MAC7B,CAAC,CAAC,OAAOiC,QAAQ,EAAE;QACjB3F,OAAO,CAAC4F,GAAG,CAAC,yCAAyC,CAAC;QACtDL,iBAAiB,CAAC,CAAC;MACrB;IACF,CAAC,CAAC,OAAOxF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CyD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,WAAW;QAAEuB,OAAO,EAAEjD,KAAK,CAACyE;MAAQ,CAAC,CAAC;IACzD,CAAC,SAAS;MACRhB,QAAQ,CAAC;QAAE/B,IAAI,EAAE,aAAa;QAAEuB,OAAO,EAAE;MAAM,CAAC,CAAC;IACnD;EACF,CAAC,EAAE,CAACuC,iBAAiB,EAAE9B,cAAc,CAAC,CAAC;EAEvCvE,SAAS,CAAC,MAAM;IACduG,QAAQ,CAAC,CAAC;IACVpG,cAAc,CAACwG,mBAAmB,CAAC,CAAC;IAEpC,MAAMC,eAAe,GAAGC,WAAW,CAAC,MAAM;MACxCR,iBAAiB,CAAC,CAAC;IACrB,CAAC,EAAE,KAAK,CAAC;IAET,OAAO,MAAMS,aAAa,CAACF,eAAe,CAAC;EAC7C,CAAC,EAAE,CAACL,QAAQ,EAAEF,iBAAiB,CAAC,CAAC;EAEjC,MAAMU,SAAS,GAAG,MAAOC,UAAU,IAAK;IACtC,IAAI;MACF,MAAMC,SAAS,GAAG,MAAM/G,UAAU,CAACgH,YAAY,CAACF,UAAU,CAAC;MAC3D1C,QAAQ,CAAC;QAAE/B,IAAI,EAAE,YAAY;QAAEuB,OAAO,EAAEmD;MAAU,CAAC,CAAC;MACpD,OAAOA,SAAS;IAClB,CAAC,CAAC,OAAOpG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMsG,UAAU,GAAG;QACjB,GAAGH,UAAU;QACbjG,EAAE,EAAE,QAAQ+B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACxBM,MAAM,EAAE,QAAQ;QAChB6C,YAAY,EAAE,GAAG;QACjBC,UAAU,EAAE,KAAK;QACjBrB,kBAAkB,EAAE,IAAI;QACxBiB,eAAe,EAAE,IAAI;QACrBqB,UAAU,EAAE,IAAItE,IAAI,CAAC,CAAC,CAAC0C,WAAW,CAAC;MACrC,CAAC;MACDlB,QAAQ,CAAC;QAAE/B,IAAI,EAAE,YAAY;QAAEuB,OAAO,EAAEqD;MAAW,CAAC,CAAC;MACrD,OAAOA,UAAU;IACnB;EACF,CAAC;EAED,MAAME,YAAY,GAAG,MAAAA,CAAOtG,EAAE,EAAEiG,UAAU,KAAK;IAC7C,IAAI;MACF,MAAMM,aAAa,GAAG,MAAMpH,UAAU,CAACmH,YAAY,CAACtG,EAAE,EAAEiG,UAAU,CAAC;MACnE1C,QAAQ,CAAC;QAAE/B,IAAI,EAAE,eAAe;QAAEuB,OAAO,EAAEwD;MAAc,CAAC,CAAC;MAC3DnH,cAAc,CAACoH,kBAAkB,CAACxG,EAAE,EAAEiG,UAAU,CAAC;MAEjD,MAAMQ,aAAa,GAAG7G,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC,IAAI,IAAI,CAAC;MACzF8G,aAAa,CAACzG,EAAE,CAAC,GAAGiG,UAAU;MAC9BvG,YAAY,CAAC8C,OAAO,CAAC,yBAAyB,EAAE5C,IAAI,CAAC6C,SAAS,CAACgE,aAAa,CAAC,CAAC;MAE9E,OAAOF,aAAa;IACtB,CAAC,CAAC,OAAOzG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM4G,cAAc,GAAG/D,KAAK,CAAC3B,OAAO,CAAC2F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC5G,EAAE,KAAKA,EAAE,CAAC;MAC3D,MAAM6G,YAAY,GAAG;QAAE,GAAGH,cAAc;QAAE,GAAGT,UAAU;QAAEjG;MAAG,CAAC;MAE7DuD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,eAAe;QAAEuB,OAAO,EAAE8D;MAAa,CAAC,CAAC;MAC1DzH,cAAc,CAACoH,kBAAkB,CAACxG,EAAE,EAAEiG,UAAU,CAAC;MAEjD,MAAMQ,aAAa,GAAG7G,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC,IAAI,IAAI,CAAC;MACzF8G,aAAa,CAACzG,EAAE,CAAC,GAAGiG,UAAU;MAC9BvG,YAAY,CAAC8C,OAAO,CAAC,yBAAyB,EAAE5C,IAAI,CAAC6C,SAAS,CAACgE,aAAa,CAAC,CAAC;MAE9E,OAAOI,YAAY;IACrB;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAO9G,EAAE,IAAK;IACjC,IAAI;MACF,MAAMb,UAAU,CAAC2H,YAAY,CAAC9G,EAAE,CAAC;MACjCuD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,eAAe;QAAEuB,OAAO,EAAE/C;MAAG,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CyD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,eAAe;QAAEuB,OAAO,EAAE/C;MAAG,CAAC,CAAC;IAClD;EACF,CAAC;EAED,MAAM+G,OAAO,GAAG,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAM9H,UAAU,CAAC+H,UAAU,CAACF,QAAQ,CAAC;MACrDzD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,UAAU;QAAEuB,OAAO,EAAEkE;MAAQ,CAAC,CAAC;MAChD,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOnH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMqH,QAAQ,GAAG;QAAE,GAAGH,QAAQ;QAAEhH,EAAE,EAAE,KAAK+B,IAAI,CAACC,GAAG,CAAC,CAAC;MAAG,CAAC;MACvDuB,QAAQ,CAAC;QAAE/B,IAAI,EAAE,UAAU;QAAEuB,OAAO,EAAEoE;MAAS,CAAC,CAAC;MACjD,OAAOA,QAAQ;IACjB;EACF,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAOpH,EAAE,EAAEgH,QAAQ,KAAK;IACzC,IAAI;MACF,MAAMK,WAAW,GAAG,MAAMlI,UAAU,CAACiI,UAAU,CAACpH,EAAE,EAAEgH,QAAQ,CAAC;MAC7DzD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,aAAa;QAAEuB,OAAO,EAAEsE;MAAY,CAAC,CAAC;MACvD,OAAOA,WAAW;IACpB,CAAC,CAAC,OAAOvH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMwH,YAAY,GAAG3E,KAAK,CAAC1B,KAAK,CAAC0F,IAAI,CAACY,CAAC,IAAIA,CAAC,CAACvH,EAAE,KAAKA,EAAE,CAAC;MACvD,MAAMmH,QAAQ,GAAG;QAAE,GAAGG,YAAY;QAAE,GAAGN,QAAQ;QAAEhH;MAAG,CAAC;MACrDuD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,aAAa;QAAEuB,OAAO,EAAEoE;MAAS,CAAC,CAAC;MACpD,OAAOA,QAAQ;IACjB;EACF,CAAC;EAED,MAAMK,UAAU,GAAG,MAAOxH,EAAE,IAAK;IAC/B,IAAI;MACF,MAAMb,UAAU,CAACqI,UAAU,CAACxH,EAAE,CAAC;MAC/BuD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,aAAa;QAAEuB,OAAO,EAAE/C;MAAG,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CyD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,aAAa;QAAEuB,OAAO,EAAE/C;MAAG,CAAC,CAAC;IAChD;EACF,CAAC;EAED,MAAMyH,cAAc,GAAG,MAAOC,QAAQ,IAAK;IACzC,IAAI;MACF,MAAMC,eAAe,GAAG;QAAE,GAAGhF,KAAK,CAAC5B,QAAQ;QAAE,GAAG2G;MAAS,CAAC;MAE1DhI,YAAY,CAAC8C,OAAO,CAAC,oBAAoB,EAAE5C,IAAI,CAAC6C,SAAS,CAACkF,eAAe,CAAC,CAAC;MAE3EpE,QAAQ,CAAC;QAAE/B,IAAI,EAAE,kBAAkB;QAAEuB,OAAO,EAAE4E;MAAgB,CAAC,CAAC;MAEhEC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,iBAAiB,EAAE;QACtDC,MAAM,EAAEJ;MACV,CAAC,CAAC,CAAC;MAEH,OAAOA,eAAe;IACxB,CAAC,CAAC,OAAO7H,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDyD,QAAQ,CAAC;QAAE/B,IAAI,EAAE,kBAAkB;QAAEuB,OAAO,EAAE2E;MAAS,CAAC,CAAC;MACzD,OAAOA,QAAQ;IACjB;EACF,CAAC;EAED,MAAMM,uBAAuB,GAAGA,CAACzG,QAAQ,EAAE0G,IAAI,GAAG,CAAC,KAAK;IACtD,OAAO7I,cAAc,CAAC8I,iBAAiB,CAAC3G,QAAQ,EAAE0G,IAAI,CAAC;EACzD,CAAC;EAED,MAAME,mBAAmB,GAAGA,CAAA,KAAM;IAChC/I,cAAc,CAACgJ,mBAAmB,CAAC,CAAC;IACpC9C,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAED,MAAM+C,iBAAiB,GAAI1E,OAAO,IAAK;IACrC,MAAMrC,KAAK,GAAGqB,KAAK,CAACzB,MAAM,CAACyF,IAAI,CAAC2B,CAAC,IAAIA,CAAC,CAACtI,EAAE,KAAK2D,OAAO,CAAC;IACtD,IAAIrC,KAAK,EAAE;MACT,MAAMiH,YAAY,GAAG;QAAE,GAAGjH,KAAK;QAAEsD,QAAQ,EAAE,IAAI;QAAErC,UAAU,EAAER,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC;MACzEuB,QAAQ,CAAC;QAAE/B,IAAI,EAAE,cAAc;QAAEuB,OAAO,EAAEwF;MAAa,CAAC,CAAC;MAEzD,MAAM3E,aAAa,GAAGjC,iBAAiB,CAAC,CAAC;MACzC,MAAMkD,QAAQ,GAAGxD,WAAW,CAACC,KAAK,CAAC;MACnCsC,aAAa,CAACiB,QAAQ,CAAC,GAAG;QACxBD,QAAQ,EAAE,IAAI;QACdrC,UAAU,EAAER,IAAI,CAACC,GAAG,CAAC;MACvB,CAAC;MACDJ,iBAAiB,CAACgC,aAAa,CAAC;IAClC;EACF,CAAC;EAED,MAAMc,KAAK,GAAG;IACZ,GAAG/B,KAAK;IACRqD,SAAS;IACTM,YAAY;IACZQ,YAAY;IACZC,OAAO;IACPK,UAAU;IACVI,UAAU;IACVC,cAAc;IACdjC,QAAQ;IACRwC,uBAAuB;IACvBG,mBAAmB;IACnB7C,iBAAiB;IACjB+C;EACF,CAAC;EAED,oBACE/I,OAAA,CAACC,WAAW,CAACiJ,QAAQ;IAAC9D,KAAK,EAAEA,KAAM;IAAArB,QAAA,EAChCA;EAAQ;IAAAoF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACtF,EAAA,CAtTWF,YAAY;AAAAyF,EAAA,GAAZzF,YAAY;AAwTzB,OAAO,MAAM0F,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGjK,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAACyJ,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAevJ,WAAW;AAAC,IAAAsJ,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}