{"ast":null,"code":"// src/services/userService.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    if (response.status === 401) {\n      // Unauthorized - token might be expired\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      throw new Error('Session expired. Please login again.');\n    }\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  return await response.json();\n};\nexport const userService = {\n  // Get current user profile\n  getCurrentUser: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw error;\n    }\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/profile`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(profileData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  },\n  // Change password\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/change-password`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          currentPassword,\n          newPassword\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  },\n  // Get user preferences\n  getPreferences: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/preferences`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get preferences error:', error);\n      throw error;\n    }\n  },\n  // Update user preferences\n  updatePreferences: async preferences => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/preferences`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(preferences)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update preferences error:', error);\n      throw error;\n    }\n  },\n  // Upload profile avatar\n  uploadAvatar: async file => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', file);\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_BASE_URL}/api/users/avatar`, {\n        method: 'POST',\n        headers: {\n          ...(token && {\n            'Authorization': `Bearer ${token}`\n          })\n        },\n        body: formData\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Upload avatar error:', error);\n      throw error;\n    }\n  },\n  // Delete user account\n  deleteAccount: async password => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/account`, {\n        method: 'DELETE',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          password\n        })\n      });\n      if (response.ok) {\n        localStorage.removeItem('token');\n      }\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Delete account error:', error);\n      throw error;\n    }\n  },\n  // Get user activity log\n  getActivityLog: async (limit = 50, offset = 0) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/activity?limit=${limit}&offset=${offset}`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get activity log error:', error);\n      throw error;\n    }\n  },\n  // Get user notifications\n  getNotifications: async (limit = 20, offset = 0) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notifications?limit=${limit}&offset=${offset}`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get notifications error:', error);\n      throw error;\n    }\n  },\n  // Mark notification as read\n  markNotificationRead: async notificationId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notifications/${notificationId}/read`, {\n        method: 'PUT',\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Mark notification read error:', error);\n      throw error;\n    }\n  },\n  // Mark all notifications as read\n  markAllNotificationsRead: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notifications/read-all`, {\n        method: 'PUT',\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Mark all notifications read error:', error);\n      throw error;\n    }\n  },\n  // Export user data\n  exportUserData: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/export`, {\n        headers: getAuthHeaders()\n      });\n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n\n      // Handle file download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = 'user-data-export.json';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return {\n        success: true,\n        message: 'Data exported successfully'\n      };\n    } catch (error) {\n      console.error('Export user data error:', error);\n      throw error;\n    }\n  },\n  // Get user dashboard stats\n  getDashboardStats: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/dashboard-stats`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get dashboard stats error:', error);\n      throw error;\n    }\n  },\n  // Update notification settings\n  updateNotificationSettings: async settings => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notification-settings`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(settings)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update notification settings error:', error);\n      throw error;\n    }\n  },\n  // Enable/disable two-factor authentication\n  updateTwoFactorAuth: async (enabled, code = null) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/two-factor`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          enabled,\n          code\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update 2FA error:', error);\n      throw error;\n    }\n  },\n  // Generate API key for user\n  generateApiKey: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/api-key`, {\n        method: 'POST',\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Generate API key error:', error);\n      throw error;\n    }\n  },\n  // Revoke API key\n  revokeApiKey: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/api-key`, {\n        method: 'DELETE',\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Revoke API key error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getAuthHeaders","token","localStorage","getItem","handleResponse","response","ok","status","removeItem","window","location","href","Error","errorData","json","catch","message","statusText","userService","getCurrentUser","fetch","headers","error","console","updateProfile","profileData","method","body","JSON","stringify","changePassword","currentPassword","newPassword","getPreferences","updatePreferences","preferences","uploadAvatar","file","formData","FormData","append","deleteAccount","password","getActivityLog","limit","offset","getNotifications","markNotificationRead","notificationId","markAllNotificationsRead","exportUserData","blob","url","URL","createObjectURL","a","document","createElement","style","display","download","appendChild","click","revokeObjectURL","removeChild","success","getDashboardStats","updateNotificationSettings","settings","updateTwoFactorAuth","enabled","code","generateApiKey","revokeApiKey"],"sources":["/Users/francescoterragni/Desktop/hayguard/frontend/src/services/userService.js"],"sourcesContent":["// src/services/userService.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && { 'Authorization': `Bearer ${token}` })\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    if (response.status === 401) {\n      // Unauthorized - token might be expired\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      throw new Error('Session expired. Please login again.');\n    }\n    \n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  return await response.json();\n};\n\nexport const userService = {\n  // Get current user profile\n  getCurrentUser: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw error;\n    }\n  },\n\n  // Update user profile\n  updateProfile: async (profileData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/profile`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(profileData)\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  },\n\n  // Change password\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/change-password`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          currentPassword,\n          newPassword\n        })\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  },\n\n  // Get user preferences\n  getPreferences: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/preferences`, {\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get preferences error:', error);\n      throw error;\n    }\n  },\n\n  // Update user preferences\n  updatePreferences: async (preferences) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/preferences`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(preferences)\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update preferences error:', error);\n      throw error;\n    }\n  },\n\n  // Upload profile avatar\n  uploadAvatar: async (file) => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', file);\n      \n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_BASE_URL}/api/users/avatar`, {\n        method: 'POST',\n        headers: {\n          ...(token && { 'Authorization': `Bearer ${token}` })\n        },\n        body: formData\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Upload avatar error:', error);\n      throw error;\n    }\n  },\n\n  // Delete user account\n  deleteAccount: async (password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/account`, {\n        method: 'DELETE',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({ password })\n      });\n      \n      if (response.ok) {\n        localStorage.removeItem('token');\n      }\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Delete account error:', error);\n      throw error;\n    }\n  },\n\n  // Get user activity log\n  getActivityLog: async (limit = 50, offset = 0) => {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/api/users/activity?limit=${limit}&offset=${offset}`,\n        {\n          headers: getAuthHeaders()\n        }\n      );\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get activity log error:', error);\n      throw error;\n    }\n  },\n\n  // Get user notifications\n  getNotifications: async (limit = 20, offset = 0) => {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/api/users/notifications?limit=${limit}&offset=${offset}`,\n        {\n          headers: getAuthHeaders()\n        }\n      );\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get notifications error:', error);\n      throw error;\n    }\n  },\n\n  // Mark notification as read\n  markNotificationRead: async (notificationId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notifications/${notificationId}/read`, {\n        method: 'PUT',\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Mark notification read error:', error);\n      throw error;\n    }\n  },\n\n  // Mark all notifications as read\n  markAllNotificationsRead: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notifications/read-all`, {\n        method: 'PUT',\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Mark all notifications read error:', error);\n      throw error;\n    }\n  },\n\n  // Export user data\n  exportUserData: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/export`, {\n        headers: getAuthHeaders()\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n      \n      // Handle file download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = 'user-data-export.json';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return { success: true, message: 'Data exported successfully' };\n    } catch (error) {\n      console.error('Export user data error:', error);\n      throw error;\n    }\n  },\n\n  // Get user dashboard stats\n  getDashboardStats: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/dashboard-stats`, {\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Get dashboard stats error:', error);\n      throw error;\n    }\n  },\n\n  // Update notification settings\n  updateNotificationSettings: async (settings) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/notification-settings`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(settings)\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update notification settings error:', error);\n      throw error;\n    }\n  },\n\n  // Enable/disable two-factor authentication\n  updateTwoFactorAuth: async (enabled, code = null) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/two-factor`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({ enabled, code })\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Update 2FA error:', error);\n      throw error;\n    }\n  },\n\n  // Generate API key for user\n  generateApiKey: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/api-key`, {\n        method: 'POST',\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Generate API key error:', error);\n      throw error;\n    }\n  },\n\n  // Revoke API key\n  revokeApiKey: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/api-key`, {\n        method: 'DELETE',\n        headers: getAuthHeaders()\n      });\n      \n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Revoke API key error:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}