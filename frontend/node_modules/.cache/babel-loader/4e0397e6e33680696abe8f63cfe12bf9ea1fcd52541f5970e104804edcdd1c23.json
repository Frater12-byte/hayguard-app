{"ast":null,"code":"// apiService.js - Complete API service for all data fetching\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    const token = localStorage.getItem('token');\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Farm Management\n  async getFarmInfo() {\n    return this.makeRequest('/api/farm/info');\n  }\n  async updateFarmInfo(farmData) {\n    return this.makeRequest('/api/farm/info', {\n      method: 'PUT',\n      body: JSON.stringify(farmData)\n    });\n  }\n\n  // Sensors\n  async getSensors() {\n    return this.makeRequest('/api/sensors');\n  }\n  async getSensorById(id) {\n    return this.makeRequest(`/api/sensors/${id}`);\n  }\n  async createSensor(sensorData) {\n    return this.makeRequest('/api/sensors', {\n      method: 'POST',\n      body: JSON.stringify(sensorData)\n    });\n  }\n  async updateSensor(id, sensorData) {\n    return this.makeRequest(`/api/sensors/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(sensorData)\n    });\n  }\n  async deleteSensor(id) {\n    return this.makeRequest(`/api/sensors/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Alerts\n  async getAlerts(filters = {}) {\n    const params = new URLSearchParams();\n\n    // Default to last 7 days\n    if (!filters.startDate) {\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      filters.startDate = sevenDaysAgo.toISOString();\n    }\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) params.append(key, value);\n    });\n    return this.makeRequest(`/api/alerts?${params}`);\n  }\n  async acknowledgeAlert(alertId) {\n    return this.makeRequest(`/api/alerts/${alertId}/acknowledge`, {\n      method: 'POST'\n    });\n  }\n  async resolveAlert(alertId) {\n    return this.makeRequest(`/api/alerts/${alertId}/resolve`, {\n      method: 'POST'\n    });\n  }\n\n  // Team Management\n  async getUsers() {\n    return this.makeRequest('/api/users');\n  }\n  async createUser(userData) {\n    return this.makeRequest('/api/users', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async updateUser(id, userData) {\n    return this.makeRequest(`/api/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData)\n    });\n  }\n  async deleteUser(id) {\n    return this.makeRequest(`/api/users/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async resetUserPassword(id, newPassword) {\n    return this.makeRequest(`/api/users/${id}/reset-password`, {\n      method: 'POST',\n      body: JSON.stringify({\n        password: newPassword\n      })\n    });\n  }\n\n  // Mock data fallbacks (remove these when all your APIs are ready)\n  async getMockSensors() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      data: [{\n        id: 1,\n        name: 'Sensor A1',\n        location: 'Field 1',\n        type: 'temperature_moisture',\n        status: 'active',\n        battery: 87,\n        temperature: 23.45,\n        moisture: 12.67,\n        lastReading: new Date().toISOString(),\n        minTemperature: 18.2,\n        maxTemperature: 31.8,\n        minMoisture: 8.5,\n        maxMoisture: 18.9\n      }, {\n        id: 2,\n        name: 'Sensor B2',\n        location: 'Field 2',\n        type: 'temperature_moisture',\n        status: 'active',\n        battery: 92,\n        temperature: 28.92,\n        moisture: 15.23,\n        lastReading: new Date().toISOString(),\n        minTemperature: 19.1,\n        maxTemperature: 33.2,\n        minMoisture: 11.2,\n        maxMoisture: 21.5\n      }, {\n        id: 3,\n        name: 'Sensor C3',\n        location: 'Field 3',\n        type: 'temperature_moisture',\n        status: 'warning',\n        battery: 45,\n        temperature: 31.78,\n        moisture: 18.45,\n        lastReading: new Date().toISOString(),\n        minTemperature: 20.3,\n        maxTemperature: 35.1,\n        minMoisture: 13.8,\n        maxMoisture: 24.2\n      }]\n    };\n  }\n\n  // Use real API or fallback to mock data\n  async getSensorsData() {\n    try {\n      return await this.getSensors();\n    } catch (error) {\n      console.warn('Using mock sensor data:', error.message);\n      return await this.getMockSensors();\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","makeRequest","endpoint","options","token","localStorage","getItem","config","headers","Authorization","response","fetch","ok","Error","status","json","error","console","getFarmInfo","updateFarmInfo","farmData","method","body","JSON","stringify","getSensors","getSensorById","id","createSensor","sensorData","updateSensor","deleteSensor","getAlerts","filters","params","URLSearchParams","startDate","sevenDaysAgo","Date","setDate","getDate","toISOString","Object","entries","forEach","key","value","append","acknowledgeAlert","alertId","resolveAlert","getUsers","createUser","userData","updateUser","deleteUser","resetUserPassword","newPassword","password","getMockSensors","Promise","resolve","setTimeout","data","name","location","type","battery","temperature","moisture","lastReading","minTemperature","maxTemperature","minMoisture","maxMoisture","getSensorsData","warn","message"],"sources":["/Users/francescoterragni/Desktop/hayguard-broken-backup/frontend/src/services/apiService.js"],"sourcesContent":["// apiService.js - Complete API service for all data fetching\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    const token = localStorage.getItem('token');\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Farm Management\n  async getFarmInfo() {\n    return this.makeRequest('/api/farm/info');\n  }\n\n  async updateFarmInfo(farmData) {\n    return this.makeRequest('/api/farm/info', {\n      method: 'PUT',\n      body: JSON.stringify(farmData),\n    });\n  }\n\n  // Sensors\n  async getSensors() {\n    return this.makeRequest('/api/sensors');\n  }\n\n  async getSensorById(id) {\n    return this.makeRequest(`/api/sensors/${id}`);\n  }\n\n  async createSensor(sensorData) {\n    return this.makeRequest('/api/sensors', {\n      method: 'POST',\n      body: JSON.stringify(sensorData),\n    });\n  }\n\n  async updateSensor(id, sensorData) {\n    return this.makeRequest(`/api/sensors/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(sensorData),\n    });\n  }\n\n  async deleteSensor(id) {\n    return this.makeRequest(`/api/sensors/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Alerts\n  async getAlerts(filters = {}) {\n    const params = new URLSearchParams();\n    \n    // Default to last 7 days\n    if (!filters.startDate) {\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      filters.startDate = sevenDaysAgo.toISOString();\n    }\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) params.append(key, value);\n    });\n    \n    return this.makeRequest(`/api/alerts?${params}`);\n  }\n\n  async acknowledgeAlert(alertId) {\n    return this.makeRequest(`/api/alerts/${alertId}/acknowledge`, {\n      method: 'POST',\n    });\n  }\n\n  async resolveAlert(alertId) {\n    return this.makeRequest(`/api/alerts/${alertId}/resolve`, {\n      method: 'POST',\n    });\n  }\n\n  // Team Management\n  async getUsers() {\n    return this.makeRequest('/api/users');\n  }\n\n  async createUser(userData) {\n    return this.makeRequest('/api/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async updateUser(id, userData) {\n    return this.makeRequest(`/api/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async deleteUser(id) {\n    return this.makeRequest(`/api/users/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async resetUserPassword(id, newPassword) {\n    return this.makeRequest(`/api/users/${id}/reset-password`, {\n      method: 'POST',\n      body: JSON.stringify({ password: newPassword }),\n    });\n  }\n\n  // Mock data fallbacks (remove these when all your APIs are ready)\n  async getMockSensors() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      data: [\n        {\n          id: 1,\n          name: 'Sensor A1',\n          location: 'Field 1',\n          type: 'temperature_moisture',\n          status: 'active',\n          battery: 87,\n          temperature: 23.45,\n          moisture: 12.67,\n          lastReading: new Date().toISOString(),\n          minTemperature: 18.2,\n          maxTemperature: 31.8,\n          minMoisture: 8.5,\n          maxMoisture: 18.9\n        },\n        {\n          id: 2,\n          name: 'Sensor B2',\n          location: 'Field 2',\n          type: 'temperature_moisture',\n          status: 'active',\n          battery: 92,\n          temperature: 28.92,\n          moisture: 15.23,\n          lastReading: new Date().toISOString(),\n          minTemperature: 19.1,\n          maxTemperature: 33.2,\n          minMoisture: 11.2,\n          maxMoisture: 21.5\n        },\n        {\n          id: 3,\n          name: 'Sensor C3',\n          location: 'Field 3',\n          type: 'temperature_moisture',\n          status: 'warning',\n          battery: 45,\n          temperature: 31.78,\n          moisture: 18.45,\n          lastReading: new Date().toISOString(),\n          minTemperature: 20.3,\n          maxTemperature: 35.1,\n          minMoisture: 13.8,\n          maxMoisture: 24.2\n        }\n      ]\n    };\n  }\n\n  // Use real API or fallback to mock data\n  async getSensorsData() {\n    try {\n      return await this.getSensors();\n    } catch (error) {\n      console.warn('Using mock sensor data:', error.message);\n      return await this.getMockSensors();\n    }\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}