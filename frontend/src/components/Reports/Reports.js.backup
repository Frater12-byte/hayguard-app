import React, { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';
import Loading from '../Common/Loading';

const Reports = () => {
  const [loading, setLoading] = useState(true);
  const [reportData, setReportData] = useState({
    weeklyStats: {},
    monthlyTrends: [],
    sensorPerformance: []
  });

  useEffect(() => {
    setTimeout(() => {
      // Generate monthly trends data
      const monthlyData = [];
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
      months.forEach(month => {
        monthlyData.push({
          month,
          avgTemp: parseFloat((15 + Math.random() * 10).toFixed(2)),
          avgMoisture: parseFloat((10 + Math.random() * 15).toFixed(2)),
          alerts: Math.floor(Math.random() * 20)
        });
      });

      // Generate sensor performance data
      const sensorData = [];
      for (let i = 1; i <= 10; i++) {
        sensorData.push({
          sensor: `S${String(i).padStart(3, '0')}`,
          uptime: parseFloat((85 + Math.random() * 15).toFixed(1)),
          batteryLife: Math.floor(60 + Math.random() * 40),
          dataPoints: Math.floor(800 + Math.random() * 400)
        });
      }

      setReportData({
        weeklyStats: {
          avgMoisture: 16.87,
          avgTemperature: 19.60,
          alertsGenerated: 8,
          activeSensors: 12,
          totalReadings: 2400
        },
        monthlyTrends: monthlyData,
        sensorPerformance: sensorData
      });
      setLoading(false);
    }, 1000);
  }, []);

  const generatePDFReport = () => {
    // Simulate PDF generation
    const link = document.createElement('a');
    link.href = '#';
    link.download = `farm-report-${new Date().toISOString().split('T')[0]}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading) {
    return <Loading message="Generating reports..." />;
  }

  return (
    <div className="page-container">
      {/* Report Actions */}
      <div className="flex justify-between items-center" style={{ marginBottom: 'var(--spacing-6)' }}>
        <div className="flex gap-3">
          <button className="btn btn-primary" onClick={generatePDFReport}>
            üìÑ Download PDF Report
          </button>
          <button className="btn btn-secondary">
            üìä Export Data (CSV)
          </button>
        </div>
      </div>

        <div className="card">
          <div className="card-body" style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '2rem', marginBottom: 'var(--spacing-2)' }}>üå°Ô∏è</div>
            <h3 className="heading-3">{reportData.weeklyStats.avgTemperature}¬∞C</h3>
            <p className="text-muted">Avg Temperature</p>
          </div>
        </div>
        <div className="card">
          <div className="card-body" style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '2rem', marginBottom: 'var(--spacing-2)' }}>üíß</div>
            <h3 className="heading-3">{reportData.weeklyStats.avgMoisture}%</h3>
            <p className="text-muted">Avg Moisture</p>
          </div>
        </div>
        <div className="card">
          <div className="card-body" style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '2rem', marginBottom: 'var(--spacing-2)' }}>üö®</div>
            <h3 className="heading-3">{reportData.weeklyStats.alertsGenerated}</h3>
            <p className="text-muted">Alerts Generated</p>
          </div>
        </div>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2" style={{ marginBottom: 'var(--spacing-6)' }}>
        <div className="card">
          <div className="card-header">
            <h2 className="heading-2">Monthly Trends</h2>
          </div>
          <div className="card-body">
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={reportData.monthlyTrends}>
                <CartesianGrid strokeDasharray="3 3" stroke="var(--gray-200)" />
                <XAxis dataKey="month" stroke="var(--gray-500)" fontSize={12} />
                <YAxis stroke="var(--gray-500)" fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid var(--gray-200)',
                    borderRadius: 'var(--border-radius-md)'
                  }}
                />
                <Line 
                  type="monotone" 
                  dataKey="avgTemp" 
                  stroke="var(--error-red)" 
                  strokeWidth={2}
                  name="Avg Temperature (¬∞C)"
                />
                <Line 
                  type="monotone" 
                  dataKey="avgMoisture" 
                  stroke="var(--success-green)" 
                  strokeWidth={2}
                  name="Avg Moisture (%)"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="card">
          <div className="card-header">
            <h2 className="heading-2">Monthly Alerts</h2>
          </div>
          <div className="card-body">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={reportData.monthlyTrends}>
                <CartesianGrid strokeDasharray="3 3" stroke="var(--gray-200)" />
                <XAxis dataKey="month" stroke="var(--gray-500)" fontSize={12} />
                <YAxis stroke="var(--gray-500)" fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid var(--gray-200)',
                    borderRadius: 'var(--border-radius-md)'
                  }}
                />
                <Bar dataKey="alerts" fill="var(--warning-orange)" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Sensor Performance Table */}
      <div className="card">
        <div className="card-header">
          <h2 className="heading-2">Sensor Performance Report</h2>
        </div>
        <div className="card-body">
          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th>Sensor ID</th>
                  <th>Uptime</th>
                  <th>Battery Life (days)</th>
                  <th>Data Points</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {reportData.sensorPerformance.map(sensor => (
                  <tr key={sensor.sensor}>
                    <td className="font-weight-600">{sensor.sensor}</td>
                    <td>{sensor.uptime}%</td>
                    <td>{sensor.batteryLife} days</td>
                    <td>{sensor.dataPoints.toLocaleString()}</td>
                    <td>
                      <span className={`status-badge ${sensor.uptime > 95 ? 'status-active' : 
                                                      sensor.uptime > 85 ? 'status-warning' : 'status-error'}`}>
                        {sensor.uptime > 95 ? 'EXCELLENT' : 
                         sensor.uptime > 85 ? 'GOOD' : 'NEEDS ATTENTION'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <style jsx>{`
        .font-weight-600 {
          font-weight: 600;
        }

        .table-responsive {
          overflow-x: auto;
        }
      `}</style>
    </div>
  );
};

export default Reports;
